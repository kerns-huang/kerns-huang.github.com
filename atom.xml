<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kerns的小窝</title>
  
  <subtitle>行走在路上，无愧于心。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-10-26T01:51:47.655Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>kerns</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>centos7 bsc公链全节点搭建</title>
    <link href="http://yoursite.com/2021/09/18/bsc%E5%85%AC%E9%93%BE%E5%85%A8%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2021/09/18/bsc公链全节点搭建/</id>
    <published>2021-09-18T06:44:27.000Z</published>
    <updated>2021-10-26T01:51:47.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快照安装过程"><a href="#快照安装过程" class="headerlink" title="快照安装过程"></a>快照安装过程</h1><h2 id="前置条件安装"><a href="#前置条件安装" class="headerlink" title="前置条件安装"></a>前置条件安装</h2><h3 id="git-环境安装"><a href="#git-环境安装" class="headerlink" title="git 环境安装"></a>git 环境安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install https://packages.endpoint.com/rhel/7/os/x86_64/endpoint-repo-1.7-1.x86_64.rpm</span><br><span class="line">yum install git</span><br></pre></td></tr></table></figure><h3 id="go-环境安装"><a href="#go-环境安装" class="headerlink" title="go 环境安装"></a>go 环境安装</h3><ol><li><p>下载地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">标准官网：https://golang.org/ 需要墙</span><br><span class="line">镜像官网：https://golang.google.cn/dl/ 【国内推荐】</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf go*.linux-amd64.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure></li><li><p>添加环境变量</p></li></ol><p>vi /etc/profile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export GO111MODULE=on</span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOPATH=/home/gopath</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br></pre></td></tr></table></figure><h3 id="nginx-安装"><a href="#nginx-安装" class="headerlink" title="nginx 安装"></a>nginx 安装</h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><p>  配置 bsc.conf</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen       443;</span><br><span class="line">      server_name  www.tianyisec.com;</span><br><span class="line">      # ssl证书地址</span><br><span class="line">      ssl_certificate     /etc/nginx/conf.d/6319711_www.tianyisec.com.pem;  # pem文件的路径</span><br><span class="line">      ssl_certificate_key  /etc/nginx/conf.d/6319711_www.tianyisec.com.key; # key文件的路径</span><br><span class="line"></span><br><span class="line">       # ssl验证相关配置</span><br><span class="line">      ssl_session_timeout  5m;    #缓存有效期</span><br><span class="line">      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    #加密算法</span><br><span class="line">      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    #安全链接可选的加密协议</span><br><span class="line">      ssl_prefer_server_ciphers on;   #使用服务器端的首选算法</span><br><span class="line">      location / &#123;</span><br><span class="line">         add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</span><br><span class="line">         add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS, PUT, DELETE&apos;;</span><br><span class="line">         add_header &apos;Access-Control-Allow-Headers&apos; &apos;Content-Type&apos;;</span><br><span class="line">         proxy_pass         http://localhost:8876;</span><br><span class="line">         proxy_set_header   X-Forwarded-Proto $scheme;</span><br><span class="line">         proxy_set_header   Host              $http_host;</span><br><span class="line">         proxy_set_header   X-Real-IP         $remote_addr;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>下载bsc 快照数据</li></ol><p>使用快照的原因，从0开始同步数据会很慢，所以需要通过快照的加快区块的同步过程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/binance-chain/bsc-snapshots</span><br></pre></td></tr></table></figure><p>下载命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup  wget -O geth.tar.gz &quot;snapurl&quot; &gt;/dev/null 2&gt;log &amp;</span><br></pre></td></tr></table></figure><ol start="2"><li>下载 bsc 快照</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/binance-chain/bsc</span><br></pre></td></tr></table></figure><ol start="3"><li>编译geth</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd bsc</span><br><span class="line">make geth</span><br></pre></td></tr></table></figure><ol start="5"><li>下载初始化配置文件</li></ol><p>主网</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/binance-chain/bsc/releases/download/v1.1.2/mainnet.zip</span><br><span class="line">unzip mainnet.zip</span><br></pre></td></tr></table></figure><p>测试网络</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/binance-chain/bsc/releases/download/v1.1.2/testnet.zip</span><br><span class="line">unzip testnet.zip</span><br></pre></td></tr></table></figure><p>config.toml 节点配置修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Node]</span><br><span class="line">IPCPath = &quot;geth.ipc&quot;</span><br><span class="line">HTTPHost = &quot;0.0.0.0&quot;</span><br><span class="line">NoUSB = true</span><br><span class="line">InsecureUnlockAllowed = false</span><br><span class="line">HTTPPort = 8876</span><br><span class="line">HTTPVirtualHosts = [&quot;*&quot;]</span><br><span class="line">HTTPModules = [&quot;eth&quot;, &quot;net&quot;, &quot;web3&quot;, &quot;txpool&quot;, &quot;parlia&quot;]</span><br><span class="line">WSPort = 8877    </span><br><span class="line">WSModules = [&quot;net&quot;, &quot;web3&quot;, &quot;eth&quot;]</span><br></pre></td></tr></table></figure><ol start="6"><li>初始化（当从快照执行的时候不用）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir node init genesis.json</span><br></pre></td></tr></table></figure><ol start="6"><li>运行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup geth --config ./config.toml --datadir ./server/data-seed/geth  --cache 32768 --rpc.allow-unprotected-txs --txlookuplimit 0 &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>cache: 以m为单位，缓存设置约大，同步数据越快,目前设置为32G。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="同步速度跟不上主链的高度"><a href="#同步速度跟不上主链的高度" class="headerlink" title="同步速度跟不上主链的高度"></a>同步速度跟不上主链的高度</h2><h3 id="添加常用节点"><a href="#添加常用节点" class="headerlink" title="添加常用节点"></a>添加常用节点</h3><p>节点设置： <datadir>/geth/static-nodes.json:</datadir></p><h3 id="信任节点设置"><a href="#信任节点设置" class="headerlink" title="信任节点设置"></a>信任节点设置</h3><p>节点设置： <datadir>/geth/trusted-nodes.json </datadir></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://docs.binance.org/smart-chain/developer/fullnode.html" target="_blank" rel="noopener">https://docs.binance.org/smart-chain/developer/fullnode.html</a></p><h1 id="一些常用的命令"><a href="#一些常用的命令" class="headerlink" title="一些常用的命令"></a>一些常用的命令</h1><ol><li>查看节点最新同步的区块高度</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s -H Content-Type:application/json -X POST --data &apos;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;eth_blockNumber&quot;,&quot;params&quot;:[],&quot;id&quot;:1&#125;&apos; http://127.0.0.1:8876</span><br></pre></td></tr></table></figure><ol start="2"><li>查看是否同步完成</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s -H Content-Type:application/json -X POST --data &apos;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;eth_syncing&quot;,&quot;params&quot;:[],&quot;id&quot;:1&#125;&apos; http://127.0.0.1:8876</span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">geth attach http://localhost:8876</span><br><span class="line">eth.syncing</span><br><span class="line">eth.blockNumber</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;快照安装过程&quot;&gt;&lt;a href=&quot;#快照安装过程&quot; class=&quot;headerlink&quot; title=&quot;快照安装过程&quot;&gt;&lt;/a&gt;快照安装过程&lt;/h1&gt;&lt;h2 id=&quot;前置条件安装&quot;&gt;&lt;a href=&quot;#前置条件安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用python 调用 defi 函数</title>
    <link href="http://yoursite.com/2021/09/17/%E4%BD%BF%E7%94%A8python-%E8%B0%83%E7%94%A8-defi-%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2021/09/17/使用python-调用-defi-函数/</id>
    <published>2021-09-16T21:30:11.000Z</published>
    <updated>2021-10-25T01:42:48.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-web3-py"><a href="#安装-web3-py" class="headerlink" title="安装 web3 py"></a>安装 web3 py</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install web3</span><br></pre></td></tr></table></figure><h2 id="连接节点的最常用方法是"><a href="#连接节点的最常用方法是" class="headerlink" title="连接节点的最常用方法是"></a>连接节点的最常用方法是</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.IPC（使用本地文件系统：最快，最安全）</span><br><span class="line">2.Websockets（远程工作，比 HTTP 更快,但一般只有私人节点开发）</span><br><span class="line">3.HTTP（更多节点支持它）</span><br></pre></td></tr></table></figure><p>具体的参考资料网上很多</p><h2 id="合约调用代码demo"><a href="#合约调用代码demo" class="headerlink" title="合约调用代码demo"></a>合约调用代码demo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">swap 合约  新币抢链机器人</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import json</span><br><span class="line">import requests</span><br><span class="line">from web3 import Web3</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getAbi(contract_address):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    :param contract_address: 合约地址</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    url_scan = &quot;https://api.bscscan.com/api?module=contract&amp;action=getabi&amp;address=&quot; + str(contract_address)</span><br><span class="line">    r = requests.get(url=url_scan)</span><br><span class="line">    response = r.json()</span><br><span class="line">    abi = json.loads(response[&quot;result&quot;])</span><br><span class="line">    return abi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 交换虚拟货币</span><br><span class="line">def swap():</span><br><span class="line">    contract_address = web3.toChecksumAddress(router_contract_address)</span><br><span class="line">    contract = web3.eth.contract(address=contract_address,</span><br><span class="line">                                 abi=contract_abi)</span><br><span class="line">    # 交易对</span><br><span class="line">    pair = [token_in, token_out]</span><br><span class="line">    amounts = contract.functions.getAmountsOut(amount_in, pair).call()</span><br><span class="line">    amount_out_min = amounts[1] * (1 - slippage)</span><br><span class="line">    if amount_out_min &lt; min_buy_token_amount:</span><br><span class="line">        print(&quot;目前能买到的币数量为: &#123;0&#125;,最小购买的币数量为: &#123;1&#125;,已经小于最小购买数量&quot;.format(amount_out_min, min_buy_token_amount))</span><br><span class="line">        return</span><br><span class="line">    # 开始交易</span><br><span class="line">    txn = contract.functions.swapExactTokensForTokens(</span><br><span class="line">        amount_in,</span><br><span class="line">        amount_out_min,</span><br><span class="line">        pair,</span><br><span class="line">        # 接收人的币种地址</span><br><span class="line">        address,</span><br><span class="line">        (int(time.time()) + 10000)</span><br><span class="line">    ).buildTransaction(&#123;</span><br><span class="line">        &apos;chainId&apos;: 56,</span><br><span class="line">        &apos;from&apos;: address,</span><br><span class="line">        # 手续费根据需要加大</span><br><span class="line">        &apos;gas&apos;: gas,</span><br><span class="line">        &apos;gasPrice&apos;: web3.eth.gasPrice,</span><br><span class="line">        &apos;nonce&apos;: nonce,</span><br><span class="line">    &#125;)</span><br><span class="line">    signed_txn = web3.eth.account.sign_transaction(txn, private_key=private_key)</span><br><span class="line">    tx_token = web3.eth.send_raw_transaction(signed_txn.rawTransaction)</span><br><span class="line">    print(&quot;swap token tx is &#123;0&#125;&quot;.format(web3.toHex(tx_token)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # 币安的写成币安的地址</span><br><span class="line">    url = &quot;https://bsc-dataseed1.binance.org&quot;</span><br><span class="line">    web3 = Web3(Web3.HTTPProvider(url))</span><br><span class="line">    # pancake 智能合约</span><br><span class="line">    router_contract_address = &quot;0x10ED43C718714eb63d5aA57B78B54704E256024E&quot;</span><br><span class="line">    # 钱包私钥信息</span><br><span class="line">    private_key = &quot;&quot;</span><br><span class="line">    # 钱包地址</span><br><span class="line">    address = web3.toChecksumAddress(&quot;&quot;)</span><br><span class="line">    # 发送的币种信息</span><br><span class="line">    send_token_address = &quot;0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c&quot;</span><br><span class="line">    # 交易的币种信息</span><br><span class="line">    buy_token_address = &quot;0xfbb4f2f342c6daab63ab85b0226716c4d1e26f36&quot;</span><br><span class="line">    # 交易的币数量</span><br><span class="line">    send_token_amount = 0.3</span><br><span class="line">    # 最小买入金额</span><br><span class="line">    min_buy_token_amount = 2000</span><br><span class="line">    # 燃烧的gas 费</span><br><span class="line">    gas = 7000000</span><br><span class="line">    # 间隔时间</span><br><span class="line">    split_second = 5</span><br><span class="line">    # 滑点 0.5 = 50%</span><br><span class="line">    slippage = 0.5</span><br><span class="line"></span><br><span class="line">    amount_in = Web3.toWei(send_token_amount, &apos;ether&apos;)</span><br><span class="line">    token_in = Web3.toChecksumAddress(send_token_address)</span><br><span class="line">    token_out = Web3.toChecksumAddress(buy_token_address)</span><br><span class="line">    nonce = web3.eth.getTransactionCount(address)</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            swap()</span><br><span class="line">            nonce = nonce + 1</span><br><span class="line">        except ValueError as e:</span><br><span class="line">            print(&quot;swap error &#123;0&#125;&quot;.format(e))</span><br><span class="line">        time.sleep(split_second)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-web3-py&quot;&gt;&lt;a href=&quot;#安装-web3-py&quot; class=&quot;headerlink&quot; title=&quot;安装 web3 py&quot;&gt;&lt;/a&gt;安装 web3 py&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gogs-drone自动化部署</title>
    <link href="http://yoursite.com/2020/12/23/drone%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2020/12/23/drone自动化部署/</id>
    <published>2020-12-23T06:42:00.000Z</published>
    <updated>2021-08-23T08:29:40.704Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一步docker-部署"><a href="#第一步docker-部署" class="headerlink" title="第一步docker 部署"></a>第一步docker 部署</h3><p>docker 安装</p><p>docker-compose 安装</p><h3 id="第二步-gogs-drone-compose-文件下载"><a href="#第二步-gogs-drone-compose-文件下载" class="headerlink" title="第二步 gogs drone compose 文件下载"></a>第二步 gogs drone compose 文件下载</h3><p><a href="https://github.com/alicfeng/gogs-drone-docker.git" target="_blank" rel="noopener">https://github.com/alicfeng/gogs-drone-docker.git</a></p><p>cd gogs-drone-docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h3 id="启动完之后配置"><a href="#启动完之后配置" class="headerlink" title="启动完之后配置"></a>启动完之后配置</h3><ol><li><p>gogs 地址 : <a href="http://ip:3000/" target="_blank" rel="noopener">http://ip:3000/</a>  </p><p>gogs类似gitlab，做代码管理的工具，刚开始安装的时候你需要自己创建帐号密码，然后把自己的项目推送到环境上去。</p></li></ol><p><img src="/images/pasted-12.png" alt="upload successful"></p><p>需要查看下钩子能否推送到drone这边，有可能配置错误，导致推送不成功。点击编辑里面有一个测试推送的设置，默认hook是不需要鉴权的。</p><p><img src="/images/pasted-13.png" alt="upload successful"></p><ol start="2"><li>drone 的默认地址: <a href="http://ip:8000/" target="_blank" rel="noopener">http://ip:8000/</a>   </li></ol><p><img src="/images/pasted-14.png" alt="upload successful"></p><p>当gogs配置好之后，drone 默认基本不需要变动，不过服务器的配置可以在drone里面去配置，可以在.drone.yml里面写死，但是不如在drone配置可以统一管理和保密。</p><h4 id="go-部署的文件配置"><a href="#go-部署的文件配置" class="headerlink" title="go 部署的文件配置"></a>go 部署的文件配置</h4><p>下面的 host ，password 等就是在drone 工程里面配置的变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">kind: pipeline</span><br><span class="line">name: code_manager_backstage</span><br><span class="line">workspace:</span><br><span class="line">  base: /var/goproject/src</span><br><span class="line">  path: code_manager_backstage</span><br><span class="line"></span><br><span class="line">steps:</span><br><span class="line">  - name: build</span><br><span class="line">    image: golang:1.14.4</span><br><span class="line">    environment:</span><br><span class="line">      GOOS: linux</span><br><span class="line">      GOARCH: amd64</span><br><span class="line">    commands:</span><br><span class="line">      - export GOPATH=/var/goproject</span><br><span class="line">      - export PATH=$PATH:$GOROOT/bin</span><br><span class="line">      - go env -w GO111MODULE=on</span><br><span class="line">      - go env -w GOPROXY=https://goproxy.io,direct</span><br><span class="line">      - go version</span><br><span class="line">      - go env</span><br><span class="line">      - go mod tidy</span><br><span class="line">      - go mod vendor</span><br><span class="line">      - go build -i -o bin/code_manager_backstage main.go</span><br><span class="line">  - name: deploy_server</span><br><span class="line">    image: appleboy/drone-scp</span><br><span class="line">    settings:</span><br><span class="line">      host:</span><br><span class="line">        from_secret: host  </span><br><span class="line">      port:</span><br><span class="line">        from_secret: port</span><br><span class="line">      username:</span><br><span class="line">        from_secret: username</span><br><span class="line">      password:</span><br><span class="line">        from_secret: password</span><br><span class="line">      target:</span><br><span class="line">        from_secret: target</span><br><span class="line">      source: ./bin</span><br><span class="line">      rm: false</span><br><span class="line">      when:</span><br><span class="line">        branch:</span><br><span class="line">          - master</span><br><span class="line">  - name: run</span><br><span class="line">    image: appleboy/drone-ssh</span><br><span class="line">    settings:</span><br><span class="line">      host:</span><br><span class="line">        from_secret: host</span><br><span class="line">      port:</span><br><span class="line">        from_secret: port</span><br><span class="line">      username:</span><br><span class="line">        from_secret: username</span><br><span class="line">      password:</span><br><span class="line">        from_secret: password</span><br><span class="line">      command_timeout: 2m</span><br><span class="line">      script:</span><br><span class="line">        - cd /generatecode/code_manager_backstage</span><br><span class="line">        - rm -rf code_manager_backstage</span><br><span class="line">        - cp bin/code_manager_backstage code_manager_backstage</span><br><span class="line">        - ./restart.sh</span><br><span class="line">        - nohup ./code_manager_backstage 1&gt;/code_manager_backstage/log/nohup`date +%Y-%m-%d`.log 2&gt;&amp;1 &amp;</span><br><span class="line">trigger:</span><br><span class="line">  branch:</span><br><span class="line">    - master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一步docker-部署&quot;&gt;&lt;a href=&quot;#第一步docker-部署&quot; class=&quot;headerlink&quot; title=&quot;第一步docker 部署&quot;&gt;&lt;/a&gt;第一步docker 部署&lt;/h3&gt;&lt;p&gt;docker 安装&lt;/p&gt;
&lt;p&gt;docker-compos
      
    
    </summary>
    
      <category term="运维" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="部署" scheme="http://yoursite.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>团队协作工具整理</title>
    <link href="http://yoursite.com/2020/12/15/%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2020/12/15/团队协作工具整理/</id>
    <published>2020-12-15T02:57:32.000Z</published>
    <updated>2021-08-23T08:29:40.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="办公聊天工具"><a href="#办公聊天工具" class="headerlink" title="办公聊天工具"></a>办公聊天工具</h2><ul><li>slack </li></ul><p>集成了很多的开发工具，你可以想安装插件一样在里面添加一些bug追踪工具，聊天的方式也更加的贴合远程协作的开发。对各个终端的支持也很全面，支持ios，android，mac和window端。</p><ul><li><p>Rocket Chat</p><p>slack 开源替代，没有聊天加密的功能</p></li></ul><h2 id="原型设计协作"><a href="#原型设计协作" class="headerlink" title="原型设计协作"></a>原型设计协作</h2><ul><li><a href="https://axhub.im/" target="_blank" rel="noopener">axhub</a></li></ul><ul><li><a href="https://modao.cc/" target="_blank" rel="noopener">墨刀</a></li></ul><h2 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h2><ul><li><p><a href="https://gitee.com/zhoujingjie/apiManager" target="_blank" rel="noopener">小幺鸡</a></p><p>java编写，开源，对于编写java的人而言，便于维护和继续扩展</p></li><li><p><a href="https://github.com/YMFE/yapi" target="_blank" rel="noopener">yapi</a></p><p>nodejs 编写，页面比小幺鸡美观舒服。做文档是不错</p></li><li><p>swagger</p><p>java的文档标准，在go上也支持，可以在代码里面直接通过文档的方式生成。</p></li></ul><h2 id="公司文档整理"><a href="#公司文档整理" class="headerlink" title="公司文档整理"></a>公司文档整理</h2><ul><li><p>gitbook :</p><p>代码规范制定，可以生成epub等电子书，功能比较强大。<br>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install npm</span><br><span class="line">npm install gitbook-cli -g</span><br></pre></td></tr></table></figure></li></ul><p>  常用的命令：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">服务启动：gitbook serve</span><br><span class="line">编译 : gitbook build</span><br></pre></td></tr></table></figure></p><p>  参考的地址 ：<a href="https://gitee.com/kernsjava/code_rule.git" target="_blank" rel="noopener">https://gitee.com/kernsjava/code_rule.git</a></p><ul><li>docsify ：</li></ul><p>如果嫌弃gitbook build 太慢，没有那么多需要转换的功能，可以用这个。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;办公聊天工具&quot;&gt;&lt;a href=&quot;#办公聊天工具&quot; class=&quot;headerlink&quot; title=&quot;办公聊天工具&quot;&gt;&lt;/a&gt;办公聊天工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;slack &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集成了很多的开发工具，你可以想安装插件一样在里面添加一
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>centos firewall管理</title>
    <link href="http://yoursite.com/2020/11/06/centos-firewalld/"/>
    <id>http://yoursite.com/2020/11/06/centos-firewalld/</id>
    <published>2020-11-06T02:35:00.000Z</published>
    <updated>2021-08-23T08:29:40.704Z</updated>
    
    <content type="html"><![CDATA[<p>查看所有打开的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><p>永久添加端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><p>更新防火墙规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>删除端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone= public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查看所有打开的端口&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;cod
      
    
    </summary>
    
      <category term="运维" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="linux" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql 问题定位</title>
    <link href="http://yoursite.com/2020/10/23/mysql%E8%BF%9E%E6%8E%A5%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/10/23/mysql连接数问题/</id>
    <published>2020-10-23T00:56:00.000Z</published>
    <updated>2021-08-23T08:29:40.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看连接数问题"><a href="#查看连接数问题" class="headerlink" title="查看连接数问题"></a>查看连接数问题</h2><h3 id="查看执行中的进程"><a href="#查看执行中的进程" class="headerlink" title="查看执行中的进程"></a>查看执行中的进程</h3><p>SHOW FULL PROCESSLIST;<br>show processlist;</p><h3 id="查看最大连接数"><a href="#查看最大连接数" class="headerlink" title="查看最大连接数"></a>查看最大连接数</h3><p>show variables like ‘%max_connections%’;</p><h3 id="8-0-中设置最大连接数"><a href="#8-0-中设置最大连接数" class="headerlink" title="8.0 中设置最大连接数"></a>8.0 中设置最大连接数</h3><p>set persist max_connections=200;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查看连接数问题&quot;&gt;&lt;a href=&quot;#查看连接数问题&quot; class=&quot;headerlink&quot; title=&quot;查看连接数问题&quot;&gt;&lt;/a&gt;查看连接数问题&lt;/h2&gt;&lt;h3 id=&quot;查看执行中的进程&quot;&gt;&lt;a href=&quot;#查看执行中的进程&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="运维" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>selenium 爬虫</title>
    <link href="http://yoursite.com/2020/09/14/selenium-%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2020/09/14/selenium-爬虫/</id>
    <published>2020-09-14T13:13:00.000Z</published>
    <updated>2021-09-06T07:30:04.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-selenium"><a href="#安装-selenium" class="headerlink" title="安装 selenium"></a>安装 selenium</h2><p>pip install -U selenium</p><p>ps: 在安装的过程中如果遇到被墙的问题的，很容易 timeout</p><p>在mac 环境下需要修改下载源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir .pip</span><br><span class="line">cd .pip</span><br><span class="line">vim pip.conf</span><br></pre></td></tr></table></figure><p>接着进入vim编辑，写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url=http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h3 id="内核安装"><a href="#内核安装" class="headerlink" title="内核安装"></a>内核安装</h3><p><a href="https://chromedriver.chromium.org/" target="_blank" rel="noopener">crome</a></p><h3 id="selenium-等待页面加载完成。"><a href="#selenium-等待页面加载完成。" class="headerlink" title="selenium 等待页面加载完成。"></a>selenium 等待页面加载完成。</h3><p>强制等待,目前用着是最好用的一个操作，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.sleep</span><br></pre></td></tr></table></figure><p>隐式等待</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.implicitly_wait(10)</span><br></pre></td></tr></table></figure><p>显示等待，有些时候执行不成功，具体原因还得定位，在python里面不好用，在java里面挺好用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element = WebDriverWait(driver, 10).until(</span><br><span class="line">        EC.presence_of_element_located((By.XPATH, &apos;//*[@id=&quot;su&quot;]&apos;))</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="后台执行"><a href="#后台执行" class="headerlink" title="后台执行"></a>后台执行</h3><p>当需要在服务端运行的时候，这个非常有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(&apos;--headless&apos;) chrome_options.add_argument(&apos;--no-sandbox&apos;)</span><br><span class="line">chrome_options.add_argument(&apos;--disable-dev-shm-usage&apos;)</span><br><span class="line">chrome_options.add_argument(&apos;--disable-gpu&apos;)</span><br><span class="line">dr = webdriver.Chrome(chrome_options=chrome_options)</span><br></pre></td></tr></table></figure><h3 id="form-表单模拟登陆"><a href="#form-表单模拟登陆" class="headerlink" title="form 表单模拟登陆"></a>form 表单模拟登陆</h3><p>如下，非常简单的操作，通过send_keys 就可以给表单对象设置value</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uInput = dr.find_element_by_id(&quot;username&quot;)</span><br><span class="line">uInput.send_keys(&quot;name&quot;)</span><br><span class="line">passInput = dr.find_element_by_id(&quot;password&quot;)</span><br><span class="line">passInput.send_keys(&quot;pasword&quot;)</span><br><span class="line">dr.find_element_by_class_name(&quot;btn-login&quot;).click()</span><br></pre></td></tr></table></figure><h3 id="调用对应的事件"><a href="#调用对应的事件" class="headerlink" title="调用对应的事件"></a>调用对应的事件</h3><p>java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Actions action = new Actions(driver);</span><br><span class="line">action.doubleClick(tds.get(2)).perform();</span><br></pre></td></tr></table></figure><h3 id="回退和前进"><a href="#回退和前进" class="headerlink" title="回退和前进"></a>回退和前进</h3><p>java 回退</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.navigate().back();</span><br></pre></td></tr></table></figure><p>java 前进</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.navigate().forward();</span><br></pre></td></tr></table></figure><h3 id="多页面，切换页面"><a href="#多页面，切换页面" class="headerlink" title="多页面，切换页面"></a>多页面，切换页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set = driver.getWindowHandles();</span><br><span class="line">for (String handle : set) &#123;</span><br><span class="line">    driver.switchTo().window(handle);</span><br><span class="line">    //获取满足条件的 页面</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="selenium-反爬机制"><a href="#selenium-反爬机制" class="headerlink" title="selenium 反爬机制"></a>selenium 反爬机制</h2><p>目前在爬取 问财 网站的时候遇到了 反爬的机制，反爬机制的原因是因为selenium的一个特征机制被识别，导致爬虫失效。<br>可以添加 如果配置项消除 selenium 特征。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chrome_options.add_argument(&quot;--disable-blink-features&quot;)</span><br><span class="line">chrome_options.add_argument(&quot;--disable-blink-features=AutomationControlled&quot;)</span><br></pre></td></tr></table></figure><h2 id="selenium方式的优劣"><a href="#selenium方式的优劣" class="headerlink" title="selenium方式的优劣"></a>selenium方式的优劣</h2><ul><li><p>优势：虽然通过浏览器内核，是简单的通过http模拟是媲美不了的，如果ajax很多，而且有很多拼接操作的页面，通过http请求，分析各个接口的含义需要花很多的时间，这个时候通过selenium通过浏览器内核直接抓取页面元素会方便很多。</p></li><li><p>劣势：比如模拟表单提交，如果ajax请求很少，或者没有，只有一次请求，但是又有很多动态的元素生成，这种情况下直接分析请求报文是更简单的操作。</p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.python66.com/seleniumjiaocheng/182.html" target="_blank" rel="noopener">http://www.python66.com/seleniumjiaocheng/182.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-selenium&quot;&gt;&lt;a href=&quot;#安装-selenium&quot; class=&quot;headerlink&quot; title=&quot;安装 selenium&quot;&gt;&lt;/a&gt;安装 selenium&lt;/h2&gt;&lt;p&gt;pip install -U selenium&lt;/p&gt;
&lt;p&gt;ps:
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>fabric 链包开发和部署</title>
    <link href="http://yoursite.com/2020/09/02/fabric%E9%93%BE%E5%8C%85%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2020/09/02/fabric链包部署/</id>
    <published>2020-09-01T16:00:00.000Z</published>
    <updated>2021-08-23T08:29:40.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载-fabric-sample-工程"><a href="#下载-fabric-sample-工程" class="headerlink" title="下载 fabric-sample 工程"></a>下载 <a href="git@github.com:hyperledger/fabric-samples.git">fabric-sample</a> 工程</h2><p>master不稳定，可能部署不成功，切换到release-1.4</p><h1 id="测试链码"><a href="#测试链码" class="headerlink" title="测试链码"></a>测试链码</h1><h2 id="1进入目录-chaincode-docker-devmode"><a href="#1进入目录-chaincode-docker-devmode" class="headerlink" title="1进入目录 chaincode-docker-devmode"></a>1进入目录 chaincode-docker-devmode</h2><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f docker-compose-simple.yaml up</span><br></pre></td></tr></table></figure><p>如果执行不成功，建议指定docker 版本号，目前我跑的是1.4.8</p><p>如果没有错误的话，我们的开发环境已经准备好了，接下来是对链码进行测试的步骤：</p><p>将编写的链码放到fabric-sample/chaincode/文件夹下</p><h2 id="2打开第二个终端执行："><a href="#2打开第二个终端执行：" class="headerlink" title="2打开第二个终端执行："></a>2打开第二个终端执行：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it chaincode sh</span><br></pre></td></tr></table></figure><p>编译链码,以官方的例子为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd chaincode_example02/go</span><br><span class="line">go build -o chaincode_example02</span><br><span class="line">CORE_PEER_ADDRESS=peer:7052 CORE_CHAINCODE_ID_NAME=mycc:0 ./chaincode_example02</span><br></pre></td></tr></table></figure><h2 id="3-安装与实例化和测试："><a href="#3-安装与实例化和测试：" class="headerlink" title="3.安装与实例化和测试："></a>3.安装与实例化和测试：</h2><p>打开第三个终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it cli bash</span><br></pre></td></tr></table></figure><h3 id="以下命令按照自己的链码内容自行修改"><a href="#以下命令按照自己的链码内容自行修改" class="headerlink" title="以下命令按照自己的链码内容自行修改"></a>以下命令按照自己的链码内容自行修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode install -p chaincodedev/chaincode/chaincode_example02/go -n mycc -v 0</span><br><span class="line">peer chaincode instantiate -n mycc -v 0 -c &apos;&#123;&quot;Args&quot;:[&quot;init&quot;,&quot;a&quot;,&quot;100&quot;,&quot;b&quot;,&quot;200&quot;]&#125;&apos; -C myc</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="调用-set-接口将-a-的值设置为20"><a href="#调用-set-接口将-a-的值设置为20" class="headerlink" title="调用 set() 接口将 a 的值设置为20:"></a>调用 set() 接口将 a 的值设置为20:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -n mycc -c &apos;&#123;&quot;Args&quot;:[&quot;set&quot;, &quot;a&quot;, &quot;20&quot;]&#125;&apos; -C myc</span><br></pre></td></tr></table></figure><h4 id="调用-get-接口查询-a-的值，发现a的值已经更新为20，测试完毕。"><a href="#调用-get-接口查询-a-的值，发现a的值已经更新为20，测试完毕。" class="headerlink" title="调用 get() 接口查询 a 的值，发现a的值已经更新为20，测试完毕。"></a>调用 get() 接口查询 a 的值，发现a的值已经更新为20，测试完毕。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -n mycc -c &apos;&#123;&quot;Args&quot;:[&quot;get&quot;,&quot;a&quot;]&#125;&apos; -C myc</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载-fabric-sample-工程&quot;&gt;&lt;a href=&quot;#下载-fabric-sample-工程&quot; class=&quot;headerlink&quot; title=&quot;下载 fabric-sample 工程&quot;&gt;&lt;/a&gt;下载 &lt;a href=&quot;git@github.com:hy
      
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="区块链" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>限流问题</title>
    <link href="http://yoursite.com/2020/08/26/%E9%99%90%E6%B5%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/08/26/限流问题/</id>
    <published>2020-08-26T12:24:00.000Z</published>
    <updated>2021-08-23T08:29:40.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本的概念："><a href="#基本的概念：" class="headerlink" title="基本的概念："></a>基本的概念：</h2><pre><code>限流是为了解决流量超出服务器的承载量，为了保证服务器的稳定性而做的折中方案。</code></pre><h2 id="通用的实现方式"><a href="#通用的实现方式" class="headerlink" title="通用的实现方式"></a>通用的实现方式</h2><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p><a href="https://github.com/kerns-huang/java-test/blob/master/src/main/java/ratelimit/CounterLimiter.java" target="_blank" rel="noopener">具体实现</a></p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>临界问题，11:59:59 秒100个请求，12:00:01秒 又100个请求，导致请求超出服务器的承载能力。</p><h3 id="滑动窗口限流"><a href="#滑动窗口限流" class="headerlink" title="滑动窗口限流"></a>滑动窗口限流</h3><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>比如限流是按照1分钟100次，我细分为60个时间间隔，第一秒消耗了多少个，我新增一秒</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p><a href>具体实现</a></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>避免了固定窗口的突发请求</p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>设置精度越高，算法消耗的空间越大精度低和固定窗口效果类似。</p><h3 id="漏斗算法"><a href="#漏斗算法" class="headerlink" title="漏斗算法"></a>漏斗算法</h3><h3 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h3><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="常用的资源隔离"><a href="#常用的资源隔离" class="headerlink" title="常用的资源隔离"></a>常用的资源隔离</h2><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本的概念：&quot;&gt;&lt;a href=&quot;#基本的概念：&quot; class=&quot;headerlink&quot; title=&quot;基本的概念：&quot;&gt;&lt;/a&gt;基本的概念：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;限流是为了解决流量超出服务器的承载量，为了保证服务器的稳定性而做的折中方案。&lt;/code&gt;&lt;
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="高并发" scheme="http://yoursite.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>锁-未完成</title>
    <link href="http://yoursite.com/2020/08/21/%E9%94%81/"/>
    <id>http://yoursite.com/2020/08/21/锁/</id>
    <published>2020-08-21T08:18:00.000Z</published>
    <updated>2021-08-23T08:29:40.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统级别如何实现锁"><a href="#操作系统级别如何实现锁" class="headerlink" title="操作系统级别如何实现锁"></a>操作系统级别如何实现锁</h1><h2 id="系统级别锁的实现"><a href="#系统级别锁的实现" class="headerlink" title="系统级别锁的实现"></a>系统级别锁的实现</h2><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>互斥锁，如果资源已经被占用，资源申请者只能进入睡眠状态。</p><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><p>自旋锁是专为防止多处理器并发而引入的一种锁，如果自旋锁已经被别的执行单元保持，调用者就一直循环在那里看是否该自旋锁的保持者已经释放了锁。在多核环境下，操作系统通过锁内存总线这个机制保证锁的唯一性。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>只有在占用锁的时间极短的情况下，使用自旋锁才是合理的</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>是递归使用一个自旋锁，即如果一个已经拥有某个自旋锁的CPU 想第二次获得这个自旋锁，则该CPU 将死锁。</p><h1 id="java-级别如果实现锁"><a href="#java-级别如果实现锁" class="headerlink" title="java 级别如果实现锁"></a>java 级别如果实现锁</h1><h2 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h2><p>调用操作系统</p><h2 id="具体的实现"><a href="#具体的实现" class="headerlink" title="具体的实现"></a>具体的实现</h2><h3 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h3><p>可重入锁的概念，持有锁的线程可以重复持有该锁。</p><h4 id="自己实现的可重入锁"><a href="#自己实现的可重入锁" class="headerlink" title="自己实现的可重入锁"></a>自己实现的可重入锁</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">public class LocalReentrantLock  &#123;</span><br><span class="line"></span><br><span class="line">    private AtomicReference&lt;Thread&gt; owner;</span><br><span class="line">    /**</span><br><span class="line">     * 被获取的次数</span><br><span class="line">     */</span><br><span class="line">    private AtomicInteger counter;</span><br><span class="line"></span><br><span class="line">    private LinkedBlockingQueue&lt;Thread&gt; waitQueue;</span><br><span class="line"></span><br><span class="line">    public LocalReentrantLock() &#123;</span><br><span class="line">        //阻塞队列</span><br><span class="line">        waitQueue = new LinkedBlockingQueue(100);</span><br><span class="line">        counter = new AtomicInteger(0);</span><br><span class="line">        owner=new AtomicReference&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 一直尝试获取锁</span><br><span class="line">     */</span><br><span class="line">    public void lock() &#123;</span><br><span class="line">        if (!tryLock()) &#123;</span><br><span class="line">            //如果获取不到锁，放入到等待队列</span><br><span class="line">            waitQueue.offer(Thread.currentThread());</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                //取头部数据</span><br><span class="line">                Thread head = waitQueue.peek();</span><br><span class="line">                if (head == Thread.currentThread()) &#123;</span><br><span class="line">                    //如果头部等于当前线程</span><br><span class="line">                    if (!tryLock()) &#123;</span><br><span class="line">                        //如果获取不到锁，说明是其它线程还占有的锁。挂起之后什么时候唤醒了，unlock的时候唤醒？</span><br><span class="line">                        LockSupport.park();</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        //获取到了锁，直接弹出当前线程。</span><br><span class="line">                        waitQueue.poll();</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    LockSupport.park();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 尝试获取锁，获取不到锁，直接返回false</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean tryLock() &#123;</span><br><span class="line">        int count = counter.get();</span><br><span class="line">        if (count &gt; 0) &#123;</span><br><span class="line">            if (owner.get() == Thread.currentThread()) &#123;</span><br><span class="line">                //拥有人是当前当前线程</span><br><span class="line">                counter.compareAndSet(count, count + 1);</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //把当前线程放到等待队列里面</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (counter.compareAndSet(count, count + 1)) &#123;</span><br><span class="line">                //如果当前线程能够设置成1，设置所有人为当前现线程。</span><br><span class="line">                owner.set(Thread.currentThread());</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //被其它的线程抢占，设置了，直接返回false</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 尝试解锁</span><br><span class="line">     */</span><br><span class="line">    public boolean tryUnlock() &#123;</span><br><span class="line">        int count = counter.get();</span><br><span class="line">        if (count &gt; 0) &#123;</span><br><span class="line">            if (owner.get() != Thread.currentThread()) &#123;</span><br><span class="line">                throw new IllegalMonitorStateException(&quot;不能释放不是自己的锁&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            // 这里面不做多线程的考虑，因为上面已经保证了操作下面方法的肯定是拥有人线程。</span><br><span class="line">            count = count - 1;</span><br><span class="line">            //设置引用次数减一</span><br><span class="line">            counter.set(count);</span><br><span class="line">            if (count == 0) &#123;</span><br><span class="line">                owner.set(null);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new IllegalMonitorStateException(&quot;锁已经释放&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解除锁定</span><br><span class="line">     */</span><br><span class="line">    public void unlock() &#123;</span><br><span class="line">       if(tryUnlock())&#123;</span><br><span class="line">           //先释放当前锁的拥有人，如果可以释放，唤醒头部线程。</span><br><span class="line">           Thread head= waitQueue.peek();</span><br><span class="line">           if(head!=null)&#123;</span><br><span class="line">               /**</span><br><span class="line">                * 解锁头部线程</span><br><span class="line">                */</span><br><span class="line">               LockSupport.unpark(head);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        LocalReentrantLock localReentrantLock = new LocalReentrantLock();</span><br><span class="line">        localReentrantLock.lock();</span><br><span class="line">        Thread.sleep(1000l);</span><br><span class="line">        System.out.println(&quot;主线程第一次获取锁&quot;);</span><br><span class="line">        new Thread(() -&gt; &#123;</span><br><span class="line">            localReentrantLock.lock();</span><br><span class="line">            System.out.println(&quot;t1 线程第一次获取锁&quot;);</span><br><span class="line">            localReentrantLock.unlock();</span><br><span class="line">            System.out.println(&quot;t1 线程解锁他获取的锁&quot;);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        localReentrantLock.lock();</span><br><span class="line">        Thread.sleep(1000l);</span><br><span class="line">        System.out.println(&quot;主线程第二次获取锁&quot;);</span><br><span class="line">        localReentrantLock.unlock();</span><br><span class="line">        System.out.println(&quot;主线程第一次释放锁&quot;);</span><br><span class="line">        localReentrantLock.unlock();</span><br><span class="line">        System.out.println(&quot;主线程第二次释放锁&quot;);</span><br><span class="line">        Thread.sleep(1000l);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h4><h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="基于redis的实现方式"><a href="#基于redis的实现方式" class="headerlink" title="基于redis的实现方式"></a>基于redis的实现方式</h3><p><a href="https://github.com/redisson/redisson" target="_blank" rel="noopener">reddsion</a></p><h3 id="基于zookeeper的实现方式"><a href="#基于zookeeper的实现方式" class="headerlink" title="基于zookeeper的实现方式"></a>基于zookeeper的实现方式</h3><p><a href="https://github.com/apache/curator" target="_blank" rel="noopener">curator</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;操作系统级别如何实现锁&quot;&gt;&lt;a href=&quot;#操作系统级别如何实现锁&quot; class=&quot;headerlink&quot; title=&quot;操作系统级别如何实现锁&quot;&gt;&lt;/a&gt;操作系统级别如何实现锁&lt;/h1&gt;&lt;h2 id=&quot;系统级别锁的实现&quot;&gt;&lt;a href=&quot;#系统级别锁的实现&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java高并发细节优化</title>
    <link href="http://yoursite.com/2020/08/07/jvm%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2020/08/07/jvm优化/</id>
    <published>2020-08-07T13:50:00.000Z</published>
    <updated>2021-08-23T08:29:40.707Z</updated>
    
    <content type="html"><![CDATA[<h3 id="逃逸分析和栈上分配"><a href="#逃逸分析和栈上分配" class="headerlink" title="逃逸分析和栈上分配"></a>逃逸分析和栈上分配</h3><ul><li><p>逃逸分析：</p><p> 就是分析出对象的作用域。当一个对象在方法体内声明后，该对象的引用被其他外部所引用时该对象就发生了逃逸，反之就会在栈帧中为对象分配内存空间。就是一个对象如果尽量在自己的方法区内调用，能增加方法执行的效率。</p></li><li><p>user1:</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class User &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>user1的测试时间：</li></ul><p><img src="/images/pasted-7.png" alt="upload successful"></p><p>user2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String id;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private ArrayList&lt;String&gt; tt=new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(String id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>user2 测试的执行时间</li></ul><p><img src="/images/pasted-6.png" alt="upload successful"></p><ul><li>测试代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class UserTest &#123;</span><br><span class="line">    public static void alloc() &#123;</span><br><span class="line">        User user = new User();</span><br><span class="line">        user.setId(&quot;12123&quot;);</span><br><span class="line">        user.setName(&quot;1231231&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        long start = System.currentTimeMillis();</span><br><span class="line">        for (int i = 0; i &lt; 1024 * 1024 * 1024; i++) &#123;</span><br><span class="line">            alloc();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(System.currentTimeMillis() - start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>两者之间的区别只是加了一个 ArrayList，效率的区别是几千倍。出现这种情况是因为 栈空间是有限的，而列表可以添加的数据是不确定的，所以jvm默认是不会把该对象放在栈空间，而只是放在堆空间。</p><p>jvm关闭逃逸分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:-DoEscapeAnalysis</span><br></pre></td></tr></table></figure><p>jdk1.6之后默认情况下是开启的，正常情况也没有理由去关闭，毕竟能够更好的提神效率。</p><h3 id="使用Integer的优化"><a href="#使用Integer的优化" class="headerlink" title="使用Integer的优化"></a>使用Integer的优化</h3><p>如果项目里面对于Integer的重复使用频率很高，Integer的优化主要是基于java代码的优化<br>下面的方法会优先使用缓存返回。而缓存的返回，可以继续看源码</p><p><img src="/images/pasted-8.png" alt="upload successful"></p><ul><li>high的值你可以通过 环境变量去设置。</li></ul><p><img src="/images/pasted-9.png" alt="upload successful"></p><p>当然基于这种原理，如果你实现知道自己会使用很多重复的Long类型，也可以使用这种方式去优化,Long 里面其实也有cache 但是写死了只有-128 到127 ，如果需要更多，可以直接写一个类，做数据的缓存。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;逃逸分析和栈上分配&quot;&gt;&lt;a href=&quot;#逃逸分析和栈上分配&quot; class=&quot;headerlink&quot; title=&quot;逃逸分析和栈上分配&quot;&gt;&lt;/a&gt;逃逸分析和栈上分配&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;逃逸分析：&lt;/p&gt;
&lt;p&gt; 就是分析出对象的作用域。当一个对象在方
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="高并发" scheme="http://yoursite.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>黑科技收集-持续更新</title>
    <link href="http://yoursite.com/2020/08/05/%E9%BB%91%E7%A7%91%E6%8A%80%E6%94%B6%E9%9B%86-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://yoursite.com/2020/08/05/黑科技收集-持续更新/</id>
    <published>2020-08-05T02:48:54.000Z</published>
    <updated>2021-08-23T08:29:40.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="密码破解工具"><a href="#密码破解工具" class="headerlink" title="密码破解工具"></a>密码破解工具</h2><p><a href="https://hashcat.net/hashcat/" target="_blank" rel="noopener">HashCat</a></p><h2 id="sql-注入"><a href="#sql-注入" class="headerlink" title="sql 注入"></a>sql 注入</h2><p><a href="http://sqlmap.org/" target="_blank" rel="noopener">sqlmap</a></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p><a href="https://nmap.org/" target="_blank" rel="noopener">nmap</a></p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>kali linux</p><h3 id="wifi攻击与钓鱼"><a href="#wifi攻击与钓鱼" class="headerlink" title="wifi攻击与钓鱼"></a>wifi攻击与钓鱼</h3><p> fluxion</p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><h3 id="密码提取"><a href="#密码提取" class="headerlink" title="密码提取"></a>密码提取</h3><p>  mimikatz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;密码破解工具&quot;&gt;&lt;a href=&quot;#密码破解工具&quot; class=&quot;headerlink&quot; title=&quot;密码破解工具&quot;&gt;&lt;/a&gt;密码破解工具&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hashcat.net/hashcat/&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>高并发之请求合并</title>
    <link href="http://yoursite.com/2020/07/27/%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%90%88%E5%B9%B6/"/>
    <id>http://yoursite.com/2020/07/27/高并发之请求合并/</id>
    <published>2020-07-27T13:52:00.000Z</published>
    <updated>2021-08-23T08:29:40.712Z</updated>
    
    <content type="html"><![CDATA[<p>如果我们没有在高并发场景下，我们获取单个用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public User getById(Integer id) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //这段代码代码该方法的正常耗时</span><br><span class="line">            Thread.sleep(10l);</span><br><span class="line">            User user = new User();</span><br><span class="line">            user.setId(id);</span><br><span class="line">            return user;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但在面向大批量to c的用户场景下，用户的请求会出现毛刺的现象。比如某段时间逛的人特别多，获取用户信息，或者商品信息的请求某段时间突然变大，导致单台服务器支持不住，如果做流控的话，体验不是很好。</p><p>在这种情况下，两种办法：<br>    1: 添加服务器<br>    2: 请求合并</p><p>添加服务器简单有效，但是成本上去了，请求合并能够解决单台服务器的吞吐量的问题，那么上面的代码需要变成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">public class MergeUserServiceImpl implements UserService &#123;</span><br><span class="line"></span><br><span class="line">    static class Request &#123;</span><br><span class="line">        Integer id;</span><br><span class="line">        CompletableFuture future;</span><br><span class="line"></span><br><span class="line">        public Request(Integer id, CompletableFuture future) &#123;</span><br><span class="line">            this.id = id;</span><br><span class="line">            this.future = future;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private LinkedBlockingQueue&lt;Request&gt; linkedBlockingQueue = new LinkedBlockingQueue&lt;Request&gt;(1000);</span><br><span class="line"></span><br><span class="line">    public MergeUserServiceImpl()&#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void init() &#123;</span><br><span class="line">        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);</span><br><span class="line">        scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //1.从阻塞队列中取出queue的请求，生成一次批量查询。</span><br><span class="line">                    int size = linkedBlockingQueue.size();</span><br><span class="line">                    if (size == 0) &#123;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                    List&lt;Request&gt; requests = new ArrayList&lt;&gt;(size);</span><br><span class="line">                    for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">                        // 移出队列，并返回。</span><br><span class="line">                        Request poll = linkedBlockingQueue.poll();</span><br><span class="line">                        requests.add(poll);</span><br><span class="line">                    &#125;</span><br><span class="line">                    //2.组装一个批量查询请求参数。</span><br><span class="line">                    List&lt;Integer&gt; ids = new ArrayList&lt;&gt;();</span><br><span class="line">                    for (Request request : requests) &#123;</span><br><span class="line">                        ids.add(request.id);</span><br><span class="line">                    &#125;</span><br><span class="line">                    //3. http 请求，或者 dubbo 请求。批量请求，得到结果list。</span><br><span class="line">                    System.out.println(&quot;本次合并请求数量：&quot;+ids.size());</span><br><span class="line">                    //请求</span><br><span class="line">                    Map&lt;Integer, User&gt; responses = new HashMap&lt;&gt;();</span><br><span class="line">                    for(Integer id:ids)&#123;</span><br><span class="line">                        User user=new User();</span><br><span class="line">                        user.setId(id);</span><br><span class="line">                        responses.put(id,user);</span><br><span class="line">                    &#125;</span><br><span class="line">                    Thread.sleep(100l);</span><br><span class="line">                    //4.将结果响应给每一个单独的用户请求。</span><br><span class="line">                    for (Request request : requests) &#123;</span><br><span class="line">                        //根据请求中携带的能表示唯一参数，去批量查询的结果中找响应。</span><br><span class="line">                        User user= responses.get(request.id);</span><br><span class="line">                        //将结果返回到对应的请求线程。2个线程通信，异步编程赋值。</span><br><span class="line">                        //complete(),源码注释翻译：如果尚未完成，则将由方法和相关方法返回的值设置为给定值</span><br><span class="line">                        request.future.complete(user);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // 立即执行任务，并间隔10 毫秒重复执行。</span><br><span class="line">        &#125;, 0, 10, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public User getById(Integer id) &#123;</span><br><span class="line">        CompletableFuture&lt;User&gt; future = new CompletableFuture();</span><br><span class="line">        linkedBlockingQueue.offer(new Request(id, future));</span><br><span class="line">        try &#123;</span><br><span class="line">            return future.get();</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这么做的好处，可以合并io的操作，可以使用redis的pipline</p><h3 id="spring-cloud-下Hystrix请求合并"><a href="#spring-cloud-下Hystrix请求合并" class="headerlink" title="spring cloud 下Hystrix请求合并"></a>spring cloud 下Hystrix请求合并</h3><p><a href="https://blog.csdn.net/u012702547/article/details/78213270" target="_blank" rel="noopener">demo1</a><br><a href="https://juejin.im/post/5a22a88851882554bd50deae" target="_blank" rel="noopener">demo2</a></p><p>在spring 环境下的请求合并，使用了Spring的注解，逻辑思路还是如上面所示。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果我们没有在高并发场景下，我们获取单个用户信息&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="高并发" scheme="http://yoursite.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>h2 数据库源码阅读</title>
    <link href="http://yoursite.com/2020/07/24/h2-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://yoursite.com/2020/07/24/h2-数据库源码阅读/</id>
    <published>2020-07-24T02:28:00.000Z</published>
    <updated>2021-08-23T08:29:40.706Z</updated>
    
    <content type="html"><![CDATA[<p>1:添加一行数据<br>获取初始保存点<br>遍历索引，添加数据的到索引里面。<br>if 异常：<br>   回滚到保存点。</p><p>MvPrimaryIndex中<br>如果有事务：<br>   添加数据到undo日志文件中</p><img src="http://www.plantuml.com/plantuml/svg/uqhEIImkLl0D2qbCoacjvb9GK4XCIGdABzS0OeMY_79Dhbe5hhpyabI5eipqZ18hXPUxPxnOj-Jvh9OIa8wdw-OzxzlmVEDkBgxCl9BKehJ4v5G5pxoKr8fgBgvQ58tFjonwkcSg5nVKBWKbGoM5V5smfAw2KfuIH1lG1G00"><p>核心代码 MvTable</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1:添加一行数据&lt;br&gt;获取初始保存点&lt;br&gt;遍历索引，添加数据的到索引里面。&lt;br&gt;if 异常：&lt;br&gt;   回滚到保存点。&lt;/p&gt;
&lt;p&gt;MvPrimaryIndex中&lt;br&gt;如果有事务：&lt;br&gt;   添加数据到undo日志文件中&lt;/p&gt;
&lt;img src=&quot;http:
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring boot 类加载机制</title>
    <link href="http://yoursite.com/2020/07/21/Spring-boot-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2020/07/21/Spring-boot-类加载机制/</id>
    <published>2020-07-21T14:41:29.000Z</published>
    <updated>2021-08-23T08:29:40.703Z</updated>
    
    <content type="html"><![CDATA[<p>spring boot的类加载机制其实和Spring 没有什么不同，如果有什么不同的，以前需要写一堆的xml配置文件来来申明类和类之间的关系，现在基本上不需要写这么多配置文件了。这说明Spring boot在Spring上还是做了优化了，能让程序员更好更快的开发自己的程序。<br>那么主要是那个变化省去了我们可以不用去写xml的麻烦。</p><p>扫描 -&gt; 注册 - 生成bean</p><p>扫描注册类的过程如下：</p><img src="http://www.plantuml.com/plantuml/svg/ZP7DIiD04CVl-nG3NfIQFa0F7louI_C4Ip995jFTibc4KWKL4OLYptee5W_joJO85R7Obp4VdleARbgBRPg2XpqC-zlVpFmN02oV1W7i8-M7w33E51EyIGmmbMJS1OUXRvCIkAXCIzHnUuTimQbWDjHGUSBMDS2vFbme1CbSJrKWgC_U9k57ydZzDUd6buEutKudGysHHSkg42hVDg-22iHFx-dR8FfSyKp7hU_kA0glT8jD_WEF-VO_6aHX9xxeBRrdNA5qg8MvLAheia39HcQ14iXPYN8LcevlVvFZj8QxEGNOI-0ToOPPparlCvyZVkr7DwteeK_qFFDrZhXYgc5Qb1zJwuIw63IpovpXZmBjI7lFqKidkHzgSGONH0A6SRQNcp93rtzd4raS4fJBHV3w5WNWma7W1m00"><p>获取bean的过程</p><img src="http://www.plantuml.com/plantuml/svg/uyhCAqajIajCJbLmIatCSqjCBialggpcugfLuChBBqbLACfCpoYnKaW2IYeytRxqQL_JyusxkHGK0000"><h2 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h2><ul><li>BeanDefinition: Bean的定义类, 和xml里的配置一一对应;</li><li>BeanFacotry: Bean工厂接口;</li><li>BeanDefinitionRegistry: BeanDefinition的注册定义接口;</li><li>DefaultListableBeanFactory: ListableBeanFactory（extends BeanFactory）和BeanDefinitionRegistry的默认实现，提供BeanDefinition注册功能;</li><li>ApplicationContext: Spring上下文环境;</li><li>AbstractApplicationContext: 执行refresh()方法;</li><li>AbstractRefreshableApplicationContext： 提供抽象方法loadBeanDefinitions(DefaultListableBeanFactory beanFactory) 用于加载BeanDefinition.</li></ul><h2 id="plantUML-参考资料"><a href="#plantUML-参考资料" class="headerlink" title="plantUML 参考资料"></a>plantUML 参考资料</h2><p><a href="https://juejin.im/post/5c072b62e51d4520cf0ed5f8" target="_blank" rel="noopener">https://juejin.im/post/5c072b62e51d4520cf0ed5f8</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;spring boot的类加载机制其实和Spring 没有什么不同，如果有什么不同的，以前需要写一堆的xml配置文件来来申明类和类之间的关系，现在基本上不需要写这么多配置文件了。这说明Spring boot在Spring上还是做了优化了，能让程序员更好更快的开发自己的程序。
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>spring boot 优雅关闭</title>
    <link href="http://yoursite.com/2020/07/21/spring-boot-%E4%BC%98%E9%9B%85%E5%85%B3%E9%97%AD/"/>
    <id>http://yoursite.com/2020/07/21/spring-boot-优雅关闭/</id>
    <published>2020-07-21T02:20:00.000Z</published>
    <updated>2021-08-23T08:29:40.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要研究这个？"><a href="#为什么要研究这个？" class="headerlink" title="为什么要研究这个？"></a>为什么要研究这个？</h2><p>开始开发系统的时候，系统部署上线，很容易执行kill -9 执行系统的关闭，但该关闭会有问题，一个是如果老板正在执行操作，你在重新部署系统，结果就是在老板那边各种拒绝服务错误，还有一个可能在系统重启之后，老板的数据存入操作一直失败，一查原因，竟然是有个操作只执行了一半，后面的没有执行。然后就被老板一顿喷。所以一般情况下，我们需要使用kill -15 来执行关闭操作，虽然拒绝服务不能解决，这个在微服务中可以使用移除注册中心注册来解决。但是能解决数据被操作一半，系统就关闭的问题。当然更难受的是用户数据错乱，导致用户体验差，而导致老板认为你们做了一个玩具！！！</p><h2 id="spring-boot里面如何实现"><a href="#spring-boot里面如何实现" class="headerlink" title="spring boot里面如何实现"></a>spring boot里面如何实现</h2><p>目前 Spring boot 2.3 已经实现了优雅关闭的逻辑</p><p>在yml 里面配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 开启优雅关闭</span><br><span class="line">server: </span><br><span class="line">  shutdown: graceful</span><br><span class="line"># 关闭的缓冲时间，如果超过了10秒，Springboot 还是会选择强制关闭  </span><br><span class="line">spring: </span><br><span class="line">  lifecycle: </span><br><span class="line">    timeout-per-shutdown-phase: 10s</span><br></pre></td></tr></table></figure><p>如下图：<br><img src="/images/pasted-5.png" alt="upload successful"><br>默认在spring boot 里面关闭是直接关闭的，意思是即使你使用kill -15 ，spring boot 也会立即关闭。</p><h2 id="自己实现一个"><a href="#自己实现一个" class="headerlink" title="自己实现一个"></a>自己实现一个</h2><p>优雅停机的概念其实就是当我要关闭主线程的时候，当还有请求在处理，我先需要处理完请求，然后再去执行关闭的任务。<br>举个例子，通常我们的服务是跑在tomcat上面的，那么我们需要知道tomcat的请求链接应该是在任务处理完成之后关闭的。</p><h3 id="普通的java程序如果实现优雅停机"><a href="#普通的java程序如果实现优雅停机" class="headerlink" title="普通的java程序如果实现优雅停机"></a>普通的java程序如果实现优雅停机</h3><p>添加   Runtime.getRuntime().addShutdownHook(this);</p><p>钩子程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 关闭之后的钩子</span><br><span class="line"> *</span><br><span class="line"> * @author xiaohei</span><br><span class="line"> * @create 2020-07-21 上午9:25</span><br><span class="line"> **/</span><br><span class="line">public class ShutdownHook extends Thread &#123;</span><br><span class="line"></span><br><span class="line">    private boolean needShutDown = false;</span><br><span class="line"></span><br><span class="line">    private Thread mainThread;</span><br><span class="line"></span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;钩子线程已经接到退出信号&quot;);</span><br><span class="line">        needShutDown = true;</span><br><span class="line">        //打断主线程的关闭</span><br><span class="line">        mainThread.interrupt();</span><br><span class="line">        try &#123;</span><br><span class="line">            //等待主线程死亡</span><br><span class="line">            mainThread.join();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //TODO 正常情况下，这需要执行主线程死亡的回收任务，比如拒绝服务，线程池的关闭等操作</span><br><span class="line">        System.out.println(&quot;钩子线程会在主线程死亡之后死去，结束钩子生活&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ShutdownHook(Thread mainThread) &#123;</span><br><span class="line"></span><br><span class="line">        this.mainThread = mainThread;</span><br><span class="line">        this.needShutDown = false;</span><br><span class="line">        //在这添加关闭的钩子线程</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public boolean isShutDown() &#123;</span><br><span class="line">        return needShutDown;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 测试主线程</span><br><span class="line"> *</span><br><span class="line"> * @author xiaohei</span><br><span class="line"> * @create 2020-07-21 上午9:32</span><br><span class="line"> **/</span><br><span class="line">public class TestMain &#123;</span><br><span class="line"></span><br><span class="line">    private ShutdownHook shutdownHook;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">       TestMain testMain=new TestMain();</span><br><span class="line">       System.out.println(&quot;开始执行测试&quot;);</span><br><span class="line">       testMain.exec();</span><br><span class="line">       System.out.println(&quot;结束测试&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public TestMain()&#123;</span><br><span class="line">        //当前线程是主线程。</span><br><span class="line">        shutdownHook=new ShutdownHook(Thread.currentThread());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void exec()&#123;</span><br><span class="line">        while (!shutdownHook.isShutDown())&#123;</span><br><span class="line">            System.out.println(&quot;睡眠1秒钟&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(&quot;主线程睡眠被打断&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;我已经活过来了&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;关闭钩子已经执行完成&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-boot内置容器下如何实现-优雅关闭？"><a href="#spring-boot内置容器下如何实现-优雅关闭？" class="headerlink" title="spring boot内置容器下如何实现 优雅关闭？"></a>spring boot内置容器下如何实现 优雅关闭？</h3><p>//TODO 需要思考</p><h3 id="spring-boot-外置容器下如何实现优雅关闭。"><a href="#spring-boot-外置容器下如何实现优雅关闭。" class="headerlink" title="spring boot 外置容器下如何实现优雅关闭。"></a>spring boot 外置容器下如何实现优雅关闭。</h3><p>//TODO 需要思考</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/0c49eb23c627" target="_blank" rel="noopener">https://www.jianshu.com/p/0c49eb23c627</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要研究这个？&quot;&gt;&lt;a href=&quot;#为什么要研究这个？&quot; class=&quot;headerlink&quot; title=&quot;为什么要研究这个？&quot;&gt;&lt;/a&gt;为什么要研究这个？&lt;/h2&gt;&lt;p&gt;开始开发系统的时候，系统部署上线，很容易执行kill -9 执行系统的关闭，但该关闭
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>go gin web 初探</title>
    <link href="http://yoursite.com/2020/07/20/go-web-%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2020/07/20/go-web-初探/</id>
    <published>2020-07-20T01:57:00.000Z</published>
    <updated>2021-08-23T08:29:40.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-：gin-开发web"><a href="#1-：gin-开发web" class="headerlink" title="1 ：gin 开发web"></a>1 ：gin 开发web</h2><p>使用goland新建一个go mod工程， 简单的 hello word 程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main()&#123;</span><br><span class="line">engine := gin.Default()</span><br><span class="line">   </span><br><span class="line">engine.GET(&quot;test&quot;,func(c *gin.Context)&#123;</span><br><span class="line">c.JSON(http.StatusOK,gin.H&#123;&quot;code&quot;:200,&quot;msg&quot;:&quot;hell word&quot;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">engine.Run(&quot;:8089&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-一般的web开发，总会使用到数据库，最常用的数据库就是mysql，所以我们需要引入mysql。"><a href="#2-一般的web开发，总会使用到数据库，最常用的数据库就是mysql，所以我们需要引入mysql。" class="headerlink" title="2: 一般的web开发，总会使用到数据库，最常用的数据库就是mysql，所以我们需要引入mysql。"></a>2: 一般的web开发，总会使用到数据库，最常用的数据库就是mysql，所以我们需要引入mysql。</h2><p>我们需要引入 mysql 的支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/go-sql-driver/mysql</span><br></pre></td></tr></table></figure><p>然后代码变成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func main()&#123;</span><br><span class="line">engine := gin.Default()</span><br><span class="line">engine.POST(&quot;test&quot;,func(c *gin.Context)&#123;</span><br><span class="line">db, err := sql.Open(&quot;mysql&quot;, &quot;user:password@tcp(ip:port)/dbname&quot;)</span><br><span class="line">db.Exec(&quot;insert into user values(?,?)&quot;,1,&quot;张三&quot;)</span><br><span class="line">c.JSON(http.StatusOK,gin.H&#123;&quot;code&quot;:200,&quot;msg&quot;:&quot;hell word&quot;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">engine.Run(&quot;:8089&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-如2那样的代码，sql直接写在代码里面会不会不是太符合面向对象的逻辑，是否能够逻辑结构更清晰一点。"><a href="#3-如2那样的代码，sql直接写在代码里面会不会不是太符合面向对象的逻辑，是否能够逻辑结构更清晰一点。" class="headerlink" title="3 如2那样的代码，sql直接写在代码里面会不会不是太符合面向对象的逻辑，是否能够逻辑结构更清晰一点。"></a>3 如2那样的代码，sql直接写在代码里面会不会不是太符合面向对象的逻辑，是否能够逻辑结构更清晰一点。</h2><p>在这个阶段 gorm 登场</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/jinzhu/gorm</span><br></pre></td></tr></table></figure><p>这个阶段把数据库的链接单独拿出来，整理一个单独的go文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package db</span><br><span class="line"></span><br><span class="line">import _ &quot;github.com/go-sql-driver/mysql&quot;</span><br><span class="line">import &quot;github.com/jinzhu/gorm&quot;</span><br><span class="line"></span><br><span class="line">var SqlDB *gorm.DB</span><br><span class="line"></span><br><span class="line">func init() &#123;</span><br><span class="line">//创建一个数据库的连接</span><br><span class="line">var err error</span><br><span class="line">SqlDB, err = gorm.Open(&quot;mysql&quot;, &quot;username:password@tcp(ip:port)/dbname?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(&quot;failed to connect database&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个单独的 user model 类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line"> &quot;chain-web/user-web/db&quot;</span><br><span class="line">)</span><br><span class="line">type User struct &#123;</span><br><span class="line">ID   int64 `json:&quot;id&quot;`</span><br><span class="line">Name  string  `form:&quot;name&quot; json:&quot;name&quot; binding:&quot;required&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//操作用户指针，不需要返回ID</span><br><span class="line">func (user *User) Insert() (err error) &#123;</span><br><span class="line">//添加数据</span><br><span class="line">err = db.SqlDB.Create(&amp;user).Error</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main 方法变为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func main()&#123;</span><br><span class="line">engine := gin.Default()</span><br><span class="line">engine.POST(&quot;test&quot;,func(c *gin.Context)&#123;</span><br><span class="line">var user model.User</span><br><span class="line">c.ShouldBind(user)</span><br><span class="line">user.Insert()</span><br><span class="line">c.JSON(http.StatusOK,gin.H&#123;&quot;code&quot;:200,&quot;msg&quot;:&quot;hell word&quot;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">engine.Run(&quot;:8089&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个场景下，我们还可以把 路径和具体实现这块单独抽离出来，定一个router的包,response的返回一般情况下我们会有同一个的格式，所以也会抽离出来，具体的实现也会抽离，所以结构会变成如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">web</span><br><span class="line">   db //数据库的配置</span><br><span class="line">   handler //具体的controller实现</span><br><span class="line">   router  // 路由的配置</span><br><span class="line">   response //response统一格式返回</span><br><span class="line">   model  // 数据库的操作，user.Insert()之类。</span><br></pre></td></tr></table></figure><p>db.mysql.go</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import _ &quot;github.com/go-sql-driver/mysql&quot;</span><br><span class="line">import &quot;github.com/jinzhu/gorm&quot;</span><br><span class="line"></span><br><span class="line">var SqlDB *gorm.DB</span><br><span class="line"></span><br><span class="line">func init() &#123;</span><br><span class="line">//创建一个数据库的连接</span><br><span class="line">var err error</span><br><span class="line">SqlDB, err = gorm.Open(&quot;mysql&quot;, &quot;username:password@tcp(ip:port)/dbname?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(&quot;failed to connect database&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>model.user.go</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line"> &quot;chain-web/user-web/db&quot;</span><br><span class="line">)</span><br><span class="line">type User struct &#123;</span><br><span class="line">ID   int64 `json:&quot;id&quot;`</span><br><span class="line">Name  string  `form:&quot;name&quot; json:&quot;name&quot;` </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//操作用户指针，不需要返回ID</span><br><span class="line">func (user *User) Insert() (err error) &#123;</span><br><span class="line">//添加数据</span><br><span class="line">err = db.SqlDB.Create(&amp;user).Error</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handler.handler.go</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">&quot;chain-web/user-web/model&quot;</span><br><span class="line">&quot;chain-web/user-web/response&quot;</span><br><span class="line">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func Insert(c *gin.Context) &#123;</span><br><span class="line">var user model.Test</span><br><span class="line">c.ShouldBind(&amp;user)</span><br><span class="line">err :=user.Insert()</span><br><span class="line">if err != nil&#123;</span><br><span class="line">response.FailWithMessage(&quot;数据保存失败&quot;,c)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">response.Ok(c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>response.go</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package response</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Response struct &#123;</span><br><span class="line">Code int         `json:&quot;respCode&quot;`</span><br><span class="line">Msg  string      `json:&quot;respMsg&quot;`</span><br><span class="line">Data interface&#123;&#125; `json:&quot;respData&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const (</span><br><span class="line">ERROR      = 7</span><br><span class="line">SUCCESS    = 0</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func Result(code int, data interface&#123;&#125;, msg string, c *gin.Context) &#123;</span><br><span class="line">// 开始时间</span><br><span class="line">c.JSON(http.StatusOK, Response&#123;</span><br><span class="line">code,</span><br><span class="line">msg,</span><br><span class="line">data,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Ok(c *gin.Context) &#123;</span><br><span class="line">Result(SUCCESS, map[string]interface&#123;&#125;&#123;&#125;, &quot;操作成功&quot;, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func OkWithMessage(message string, c *gin.Context) &#123;</span><br><span class="line">Result(SUCCESS, map[string]interface&#123;&#125;&#123;&#125;, message, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func OkWithData(data interface&#123;&#125;, c *gin.Context) &#123;</span><br><span class="line">Result(SUCCESS, data, &quot;操作成功&quot;, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func OkDetailed(data interface&#123;&#125;, message string, c *gin.Context) &#123;</span><br><span class="line">Result(SUCCESS, data, message, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Fail(c *gin.Context) &#123;</span><br><span class="line">Result(ERROR, map[string]interface&#123;&#125;&#123;&#125;, &quot;操作失败&quot;, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func FailWithMessage(message string, c *gin.Context) &#123;</span><br><span class="line">Result(ERROR, map[string]interface&#123;&#125;&#123;&#125;, message, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func FailWithDetailed(code int, data interface&#123;&#125;, message string, c *gin.Context) &#123;</span><br><span class="line">Result(code, data, message, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>router.go</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &quot;github.com/gin-gonic/gin&quot;</span><br><span class="line">import .&quot;chain-web/user-web/handler&quot;</span><br><span class="line"></span><br><span class="line">func Init(router *gin.Engine)  &#123;</span><br><span class="line">outAuthRouter(router)</span><br><span class="line">&#125;</span><br><span class="line">// 不需要认证的接口</span><br><span class="line">func outAuthRouter(router *gin.Engine) &#123;</span><br><span class="line">v1 := router.Group(&quot;/api/v1&quot;)</span><br><span class="line">v1.POST(&quot;/test/insert&quot;, Insert)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-参数的校验"><a href="#4-参数的校验" class="headerlink" title="4 参数的校验"></a>4 参数的校验</h2><p>在java环境中，特别是Spring环境中，我们可以使用valid 注解来做参数的自动化校验，去掉了很多和主要业务无关的代码，在go里面，是用什么样的方式去处理的？</p><h2 id="5-一般的web开发还涉及-登陆，注册，权限状态的变化。"><a href="#5-一般的web开发还涉及-登陆，注册，权限状态的变化。" class="headerlink" title="5 一般的web开发还涉及 登陆，注册，权限状态的变化。"></a>5 一般的web开发还涉及 登陆，注册，权限状态的变化。</h2><h2 id="6-接口文档swagger的引入。"><a href="#6-接口文档swagger的引入。" class="headerlink" title="6 接口文档swagger的引入。"></a>6 接口文档swagger的引入。</h2><h2 id="7-配置文件的引入"><a href="#7-配置文件的引入" class="headerlink" title="7 配置文件的引入"></a>7 配置文件的引入</h2><p>如上面看到的，mysql，端口号的配置，我们是硬编码在程序里面，在go 里面我们有没有什么好的方式去更灵活的配置呢？可以使用viper，viper 类似与淘宝的diamond，现在的nacos，可以灵活的去配置我们的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/spf13/viper</span><br></pre></td></tr></table></figure><p>添加 config.yaml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">settings:</span><br><span class="line">  database:</span><br><span class="line">    name: dbname</span><br><span class="line">    dbType: mysql</span><br><span class="line">    host: ip</span><br><span class="line">    username: username</span><br><span class="line">    password: password</span><br><span class="line">    port: port</span><br><span class="line">    max-idle-conns: 10</span><br><span class="line">    max-open-conns: 10</span><br><span class="line">    log-mode: false</span><br></pre></td></tr></table></figure><p>添加 config.go</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package config</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com/spf13/viper&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var cfgDatabase *viper.Viper</span><br><span class="line"></span><br><span class="line">func Init() &#123;</span><br><span class="line">viper.AddConfigPath(&quot;./user-web/config&quot;)</span><br><span class="line">err := viper.ReadInConfig()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(fmt.Sprintf(&quot;Parse config file fail: %s&quot;, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line">cfgDatabase = viper.Sub(&quot;settings.database&quot;)</span><br><span class="line">if cfgDatabase == nil &#123;</span><br><span class="line">panic(&quot;config not found settings.database&quot;)</span><br><span class="line">&#125;</span><br><span class="line">DatabaseConfig = InitDatabase(cfgDatabase)</span><br><span class="line">&#125;</span><br><span class="line">type Database struct &#123;</span><br><span class="line">Name     string</span><br><span class="line">DBType   string</span><br><span class="line">Host     string</span><br><span class="line">Port     int</span><br><span class="line">Username string</span><br><span class="line">Password string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func InitDatabase(cfg *viper.Viper) *Database &#123;</span><br><span class="line">return &amp;Database&#123;</span><br><span class="line">Port:     cfg.GetInt(&quot;port&quot;),</span><br><span class="line">Name:     cfg.GetString(&quot;name&quot;),</span><br><span class="line">Host:     cfg.GetString(&quot;host&quot;),</span><br><span class="line">Username: cfg.GetString(&quot;username&quot;),</span><br><span class="line">Password: cfg.GetString(&quot;password&quot;),</span><br><span class="line">DBType:   cfg.GetString(&quot;dbType&quot;),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var DatabaseConfig = new(Database)</span><br></pre></td></tr></table></figure><p>数据库的配置修改为：</p><p>mysql.go 修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package db</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;bytes&quot;</span><br><span class="line">&quot;chain-web/user-web/config&quot;</span><br><span class="line">_ &quot;github.com/go-sql-driver/mysql&quot;</span><br><span class="line">&quot;strconv&quot;</span><br><span class="line">)</span><br><span class="line">import &quot;github.com/jinzhu/gorm&quot;</span><br><span class="line"></span><br><span class="line">var SqlDB *gorm.DB</span><br><span class="line">var (</span><br><span class="line">DbType   string</span><br><span class="line">Host     string</span><br><span class="line">Port     int</span><br><span class="line">Name     string</span><br><span class="line">Username string</span><br><span class="line">Password string</span><br><span class="line">)</span><br><span class="line">func SetUp() &#123;</span><br><span class="line">//创建一个数据库的连接</span><br><span class="line">var err error</span><br><span class="line">DbType = config.DatabaseConfig.DBType</span><br><span class="line">Host = config.DatabaseConfig.Host</span><br><span class="line">Port = config.DatabaseConfig.Port</span><br><span class="line">Name = config.DatabaseConfig.Name</span><br><span class="line">Username = config.DatabaseConfig.Username</span><br><span class="line">Password = config.DatabaseConfig.Password</span><br><span class="line">var conn bytes.Buffer</span><br><span class="line">conn.WriteString(Username)</span><br><span class="line">conn.WriteString(&quot;:&quot;)</span><br><span class="line">conn.WriteString(Password)</span><br><span class="line">conn.WriteString(&quot;@tcp(&quot;)</span><br><span class="line">conn.WriteString(Host)</span><br><span class="line">conn.WriteString(&quot;:&quot;)</span><br><span class="line">conn.WriteString(strconv.Itoa(Port))</span><br><span class="line">conn.WriteString(&quot;)&quot;)</span><br><span class="line">conn.WriteString(&quot;/&quot;)</span><br><span class="line">conn.WriteString(Name)</span><br><span class="line">conn.WriteString(&quot;?charset=utf8&amp;parseTime=True&amp;loc=Local&amp;timeout=1000ms&quot;)</span><br><span class="line"></span><br><span class="line">SqlDB, err = gorm.Open(DbType,  conn.String())</span><br><span class="line">SqlDB.LogMode(true)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(&quot;failed to connect database&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-微服务的引入。"><a href="#8-微服务的引入。" class="headerlink" title="8 微服务的引入。"></a>8 微服务的引入。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-：gin-开发web&quot;&gt;&lt;a href=&quot;#1-：gin-开发web&quot; class=&quot;headerlink&quot; title=&quot;1 ：gin 开发web&quot;&gt;&lt;/a&gt;1 ：gin 开发web&lt;/h2&gt;&lt;p&gt;使用goland新建一个go mod工程， 简单的 hell
      
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="web开发" scheme="http://yoursite.com/tags/web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>开发工具整理</title>
    <link href="http://yoursite.com/2020/07/10/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2020/07/10/开发工具整理/</id>
    <published>2020-07-10T01:34:00.000Z</published>
    <updated>2021-08-23T08:29:40.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="远程联调，内网穿透"><a href="#远程联调，内网穿透" class="headerlink" title="远程联调，内网穿透"></a>远程联调，内网穿透</h1><p>内网穿透的好处是有利于远程协作，可以让别人看到你写的东西，而且不用服务器部署，节约成本，更利于快速的变更。</p><h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a><a href="https://www.google.com/" title="Google" target="_blank" rel="noopener">frp</a></h2><p>frp 目前开源，可以自己搭建服务器，和客户端，好处是可以固定ip</p><h2 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok:"></a><a href="https://ngrok.com/download" target="_blank" rel="noopener">ngrok</a>:</h2><p>ngrok 的好处是不需要配置服务端，可以通过他自己的网络进行网络穿透，但外网ip是随机的，如果需要固定ip，则需要付费。</p><p>基本的启动命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/apple/go/src/ngrok http 127.0.0.1:8872</span><br></pre></td></tr></table></figure><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><h2 id="idea-插件"><a href="#idea-插件" class="headerlink" title="idea 插件"></a>idea 插件</h2><ol><li>jclasslib bytecode viewer : 可以查看javap编译后的字节码变量，查看哪些是放在栈里面的。</li><li>lombok ：不用说了，减少setter，getter的神器。</li></ol><h1 id="适合开发人员的压测工具"><a href="#适合开发人员的压测工具" class="headerlink" title="适合开发人员的压测工具"></a>适合开发人员的压测工具</h1><ol><li>wrk<br>命令行工具，适合开发人员自我测试用</li><li>jmeter<br>中量级工具，有ui工具可以用。</li><li>ab ：命令行工具，安装过于复杂</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;远程联调，内网穿透&quot;&gt;&lt;a href=&quot;#远程联调，内网穿透&quot; class=&quot;headerlink&quot; title=&quot;远程联调，内网穿透&quot;&gt;&lt;/a&gt;远程联调，内网穿透&lt;/h1&gt;&lt;p&gt;内网穿透的好处是有利于远程协作，可以让别人看到你写的东西，而且不用服务器部署，节约成
      
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>cacheline和伪共享问题</title>
    <link href="http://yoursite.com/2020/07/07/cacheline%E5%92%8C%E4%BC%AA%E5%85%B1%E4%BA%AB%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/07/07/cacheline和伪共享问题/</id>
    <published>2020-07-06T16:17:00.000Z</published>
    <updated>2021-08-23T08:29:40.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看缓存行的大小。"><a href="#查看缓存行的大小。" class="headerlink" title="查看缓存行的大小。"></a>查看缓存行的大小。</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /sys/devices/system/cpu/cpu1/cache/index0/coherency_line_size</span><br></pre></td></tr></table></figure><h1 id="验证cacheline的存在。"><a href="#验证cacheline的存在。" class="headerlink" title="验证cacheline的存在。"></a>验证cacheline的存在。</h1><p>cacheline 的代码验证,如下所示的代码，按照正常的理解我们应该认为第一个循环和第二个循环的效率应该是一样的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">       int[] arr = new int[64 * 1024 * 1024];</span><br><span class="line">       long start = System.currentTimeMillis();</span><br><span class="line">       for (int i = 0; i &lt; arr.length; i++) arr[i] *= 3;</span><br><span class="line">       System.out.println(&quot;第一个循环=&quot;+(System.currentTimeMillis() - start));</span><br><span class="line">       start = System.currentTimeMillis();</span><br><span class="line">       for (int i = 0; i &lt; arr.length; i += 16) arr[i] *= 3;</span><br><span class="line">       System.out.println(&quot;第二个循环=&quot;+(System.currentTimeMillis() - start));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>上述的循环，循环2做了循环1/16 的工作，但消耗的时间基本等同</p><p><img src="/images/pasted-11.png" alt="upload successful"></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>对于现代的操作系统而言，每次获取缓存数据到L1缓存，不是以一个字节一个字节去获取，而是一次性获取一个块(cache line)，在64位操作系统里面一个cache line大小为64byte。一个int 4bytes，所以读取16个和一次读取读取一个效率上是一样的。</p><h1 id="伪共享问题"><a href="#伪共享问题" class="headerlink" title="伪共享问题"></a>伪共享问题</h1><h2 id="出现的原因"><a href="#出现的原因" class="headerlink" title="出现的原因"></a>出现的原因</h2><p>如果 两个变量 （a,b） 同时在一个 Cache Line 中，处理器A修改了变量a ，那么处理器B中，这个 CacheLine 失效了，这个时候如果处理器B修改了变量b的话，就必须先提交处理器A的缓存，然后处理器B再去主存中读取数据！这样就出现了问题，a和b在两个处理器上被修改，本应该是一个并行的操作，但是由于缓存一致性，却成为了串行！这样会严重的影响并发的性能！</p><h2 id="解决伪共享的方案一填充long字节。"><a href="#解决伪共享的方案一填充long字节。" class="headerlink" title="解决伪共享的方案一填充long字节。"></a>解决伪共享的方案一填充long字节。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package concurrent.falseshare;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 伪共享问题：</span><br><span class="line"> * @author xiaohei</span><br><span class="line"> * @create 2020-06-28 上午11:18</span><br><span class="line"> **/</span><br><span class="line">public class FalseShareTest implements Runnable &#123;</span><br><span class="line">    public static int NUM_THREADS = 4;</span><br><span class="line">    public final static long ITERATIONS = 500L * 1000L * 1000L;</span><br><span class="line">    private final int arrayIndex;</span><br><span class="line">    private static VolatileLong[] longs;</span><br><span class="line">    public static long SUM_TIME = 0l;</span><br><span class="line">    public FalseShareTest(final int arrayIndex) &#123;</span><br><span class="line">        this.arrayIndex = arrayIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(final String[] args) throws Exception &#123;</span><br><span class="line">        Thread.sleep(10000);</span><br><span class="line">        for(int j=0; j&lt;10; j++)&#123;</span><br><span class="line">            System.out.println(j);</span><br><span class="line">            NUM_THREADS=Runtime.getRuntime().availableProcessors();</span><br><span class="line">            longs = new VolatileLong[NUM_THREADS];</span><br><span class="line">            for (int i = 0; i &lt; longs.length; i++) &#123;</span><br><span class="line">                longs[i] = new VolatileLong();</span><br><span class="line">            &#125;</span><br><span class="line">            final long start = System.nanoTime();</span><br><span class="line">            runTest();</span><br><span class="line">            final long end = System.nanoTime();</span><br><span class="line">            SUM_TIME += end - start;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;平均耗时：&quot;+SUM_TIME/10);</span><br><span class="line">    &#125;</span><br><span class="line">    private static void runTest() throws InterruptedException &#123;</span><br><span class="line">        //开启线程</span><br><span class="line">        Thread[] threads = new Thread[NUM_THREADS];</span><br><span class="line">        for (int i = 0; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i] = new Thread(new FalseShareTest(i));</span><br><span class="line">        &#125;</span><br><span class="line">        for (Thread t : threads) &#123;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">        for (Thread t : threads) &#123;</span><br><span class="line">            t.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        long i = ITERATIONS + 1;</span><br><span class="line">        while (0 != --i) &#123;</span><br><span class="line">            longs[arrayIndex].value = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public final static class VolatileLong &#123;</span><br><span class="line">        public volatile long value = 0L;     //对所有线程可见</span><br><span class="line">        /**</span><br><span class="line">         * 对象头信息占用8到12个字节</span><br><span class="line">         * 解决伪共享问题的关键</span><br><span class="line">         * 缓存行通常是 64 字节（基于 64 字节，其他长度的如 32 字节）</span><br><span class="line">         *</span><br><span class="line">         */</span><br><span class="line">        public long p1, p2, p3, p4, p5, p6;     //屏蔽此行</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决伪共享方案二-Contended注解"><a href="#解决伪共享方案二-Contended注解" class="headerlink" title="解决伪共享方案二 Contended注解"></a>解决伪共享方案二 Contended注解</h2><p>jdk 1.8 之后有效</p><h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://www.cnblogs.com/diegodu/p/9340243.html</span><br><span class="line">cnblogs.com/cyfonly/p/5800758.html</span><br><span class="line">https://blog.csdn.net/zhanglong_4444/article/details/93631216</span><br><span class="line">http://igoro.com/archive/gallery-of-processor-cache-effects/</span><br><span class="line">https://blog.csdn.net/u010983881/article/details/82704733</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;查看缓存行的大小。&quot;&gt;&lt;a href=&quot;#查看缓存行的大小。&quot; class=&quot;headerlink&quot; title=&quot;查看缓存行的大小。&quot;&gt;&lt;/a&gt;查看缓存行的大小。&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="cache" scheme="http://yoursite.com/tags/cache/"/>
    
      <category term="高并发" scheme="http://yoursite.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>spring boot 工作原理</title>
    <link href="http://yoursite.com/2020/06/26/spring-boot-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2020/06/26/spring-boot-工作原理/</id>
    <published>2020-06-26T06:46:00.000Z</published>
    <updated>2021-08-23T08:29:40.709Z</updated>
    
    <content type="html"><![CDATA[<p>spring boots 的工程开发</p><p>一般性我们只需要如下图配置就OK了</p><p><img src="/images/pasted-2.png" alt="upload successful"></p><p>为什么这么配置之后spring boots就能启动了？<br>看一下 SpringBootsApplication<br><img src="/images/pasted-0.png" alt="upload successful"></p><p>核心的代码基本就在 @EnableAutoConfiguration里面</p><p><img src="/images/pasted-3.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;spring boots 的工程开发&lt;/p&gt;
&lt;p&gt;一般性我们只需要如下图配置就OK了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/pasted-2.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
&lt;p&gt;为什么这么配置之后spring boots就
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
  </entry>
  
</feed>

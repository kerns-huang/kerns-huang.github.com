<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kerns的小窝</title>
  
  <subtitle>行走在路上，无愧于心。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2024-06-27T12:06:54.255Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>kerns</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>conda命令整理</title>
    <link href="http://yoursite.com/2024/06/27/conda%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2024/06/27/conda命令整理/</id>
    <published>2024-06-27T08:46:00.000Z</published>
    <updated>2024-06-27T12:06:54.255Z</updated>
    
    <content type="html"><![CDATA[<h3 id="新建新的python环境"><a href="#新建新的python环境" class="headerlink" title="新建新的python环境"></a>新建新的python环境</h3><pre><code>conda create --name yourEnv python=2.7</code></pre><h3 id="若想要在创建环境同时安装python的一些包："><a href="#若想要在创建环境同时安装python的一些包：" class="headerlink" title="若想要在创建环境同时安装python的一些包："></a>若想要在创建环境同时安装python的一些包：</h3><pre><code>conda create -n yourEnv python=3.6 numpy pandas</code></pre><p>若想在别人虚拟环境的基础上创建自己的环境：</p><pre><code>conda create --name &lt;yourEnv&gt; --clone &lt;baseEnv&gt;    </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;新建新的python环境&quot;&gt;&lt;a href=&quot;#新建新的python环境&quot; class=&quot;headerlink&quot; title=&quot;新建新的python环境&quot;&gt;&lt;/a&gt;新建新的python环境&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;conda create --name yo
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>mysql 表分区</title>
    <link href="http://yoursite.com/2024/05/17/mysql-%E8%A1%A8%E5%88%86%E5%8C%BA/"/>
    <id>http://yoursite.com/2024/05/17/mysql-表分区/</id>
    <published>2024-05-17T06:13:34.000Z</published>
    <updated>2024-05-20T00:35:02.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单的操作"><a href="#简单的操作" class="headerlink" title="简单的操作"></a>简单的操作</h1><h5 id="创建一个简单的分区表"><a href="#创建一个简单的分区表" class="headerlink" title="创建一个简单的分区表"></a>创建一个简单的分区表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `kerns_test2` (</span><br><span class="line">  `id` int NOT NULL,</span><br><span class="line">  `name` varchar(50) DEFAULT NULL,</span><br><span class="line">  `create_time` date NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`,`create_time`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3</span><br><span class="line">PARTITION BY RANGE (year(`create_time`))</span><br><span class="line">(PARTITION p0 VALUES LESS THAN (1990) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p1 VALUES LESS THAN (1995) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p2 VALUES LESS THAN (2000) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p3 VALUES LESS THAN (2005) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p4 VALUES LESS THAN (2010) ENGINE = InnoDB,</span><br><span class="line"> PARTITION p5 VALUES LESS THAN (2015) ENGINE = InnoDB);</span><br></pre></td></tr></table></figure><h5 id="对timestamp-进行分区，只能以下面这种方式分区"><a href="#对timestamp-进行分区，只能以下面这种方式分区" class="headerlink" title="对timestamp 进行分区，只能以下面这种方式分区"></a>对timestamp 进行分区，只能以下面这种方式分区</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE range_timestamp (</span><br><span class="line">    id INT,</span><br><span class="line">    hiredate TIMESTAMP</span><br><span class="line">)</span><br><span class="line">PARTITION BY RANGE ( UNIX_TIMESTAMP(hiredate) ) (</span><br><span class="line">    PARTITION p1 VALUES LESS THAN ( UNIX_TIMESTAMP(&apos;2015-12-02 00:00:00&apos;) ),</span><br><span class="line">    PARTITION p2 VALUES LESS THAN ( UNIX_TIMESTAMP(&apos;2015-12-03 00:00:00&apos;) )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="重新生成分区"><a href="#重新生成分区" class="headerlink" title="重新生成分区"></a>重新生成分区</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name REORGANIZE PARTITION partition_names INTO (partition_definitions)</span><br></pre></td></tr></table></figure><h5 id="对表创建分区"><a href="#对表创建分区" class="headerlink" title="对表创建分区"></a>对表创建分区</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `kerns_test2` PARTITION BY RANGE(days) (</span><br><span class="line">    PARTITION `p197001` VALUES LESS THAN (19700101),</span><br><span class="line">    PARTITION `p202003` VALUES LESS THAN (20200301),</span><br><span class="line">    PARTITION `p202004` VALUES LESS THAN (20200401)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="新增一个分区"><a href="#新增一个分区" class="headerlink" title="新增一个分区"></a>新增一个分区</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table kerns_test2 add partition(partition p2 values less than maxvalue);</span><br></pre></td></tr></table></figure><h5 id="删除一个分区表"><a href="#删除一个分区表" class="headerlink" title="删除一个分区表"></a>删除一个分区表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table kerns_test2 drop partition p1;</span><br></pre></td></tr></table></figure><h5 id="查看某个分区的数据"><a href="#查看某个分区的数据" class="headerlink" title="查看某个分区的数据"></a>查看某个分区的数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM kerns_test2 PARTITION (p2);</span><br></pre></td></tr></table></figure><h5 id="查看表里面每个分区的表数据"><a href="#查看表里面每个分区的表数据" class="headerlink" title="查看表里面每个分区的表数据"></a>查看表里面每个分区的表数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT PARTITION_NAME,TABLE_ROWS FROM INFORMATION_SCHEMA.PARTITIONS WHERE TABLE_NAME = &apos;kerns_test2&apos;;</span><br></pre></td></tr></table></figure><h5 id="清空某个分区的数据"><a href="#清空某个分区的数据" class="headerlink" title="清空某个分区的数据"></a>清空某个分区的数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table kerns_test2 truncate partition p0;</span><br></pre></td></tr></table></figure><h1 id="需要注意的事项。"><a href="#需要注意的事项。" class="headerlink" title="需要注意的事项。"></a>需要注意的事项。</h1><ol><li>MySQL 8.0 目前不支持使用InnoDB 或以外的任何存储引擎对表进行分区</li><li>分区字段必须是整数类型或解析为整数的表达式。</li><li>分区字段建议设置为NOT NULL，若某行数据分区字段为null，在RANGE分区中，该行数据会划分到最小的分区里。</li><li>MySQL分区中如果存在主键或唯一键，则分区列必须包含在其中。</li><li>Innodb分区表不支持外键。</li><li>更改sql_mode模式可能影响分区表的表现。</li><li>分区表不影响自增列。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简单的操作&quot;&gt;&lt;a href=&quot;#简单的操作&quot; class=&quot;headerlink&quot; title=&quot;简单的操作&quot;&gt;&lt;/a&gt;简单的操作&lt;/h1&gt;&lt;h5 id=&quot;创建一个简单的分区表&quot;&gt;&lt;a href=&quot;#创建一个简单的分区表&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git 版本管理</title>
    <link href="http://yoursite.com/2024/03/15/git-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2024/03/15/git-版本管理/</id>
    <published>2024-03-15T01:48:49.000Z</published>
    <updated>2024-06-05T06:59:30.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-tag-管理"><a href="#git-tag-管理" class="headerlink" title="git tag 管理"></a>git tag 管理</h2><p>创建本地分支: git tag release-1.0.1 -m “drone调整”</p><p>推送本地所有分支: git push –tags</p><p>删除本地tag分支: git tag -d release-1.0.2</p><p>同步本地分和远程分支：git push origin :refs/tags/release-1.0.2</p><h3 id="tag-管理的好处"><a href="#tag-管理的好处" class="headerlink" title="tag 管理的好处"></a>tag 管理的好处</h3><ol><li>能够很好的做版本管理，随时可以通过tag分支进行版本的回退，比如如果你所有的代码的发布都是通过master版本发布，一旦你需要做代码回退的处理，就只能修改代码取做回退，而代码修改难免出现问题，当然也可以使用docker镜像这种做版本管理。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git-tag-管理&quot;&gt;&lt;a href=&quot;#git-tag-管理&quot; class=&quot;headerlink&quot; title=&quot;git tag 管理&quot;&gt;&lt;/a&gt;git tag 管理&lt;/h2&gt;&lt;p&gt;创建本地分支: git tag release-1.0.1 -m “dron
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pyinstaller应用整理</title>
    <link href="http://yoursite.com/2024/02/26/pyinstaller%E5%BA%94%E7%94%A8%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2024/02/26/pyinstaller应用整理/</id>
    <published>2024-02-26T10:41:00.000Z</published>
    <updated>2024-06-27T08:41:58.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装pyinstaller"><a href="#安装pyinstaller" class="headerlink" title="安装pyinstaller"></a>安装pyinstaller</h1><p>pip install pyinstaller</p><h2 id="如果安装失败，可执行以下两步："><a href="#如果安装失败，可执行以下两步：" class="headerlink" title="如果安装失败，可执行以下两步："></a>如果安装失败，可执行以下两步：</h2><p>1）“pip install pywin32”</p><p>2）“pip install wheel”</p><p>3）再试一下“pip install pyinstaller”</p><h1 id="执行生成命令"><a href="#执行生成命令" class="headerlink" title="执行生成命令"></a>执行生成命令</h1><h2 id="单文件打包"><a href="#单文件打包" class="headerlink" title="单文件打包"></a>单文件打包</h2><p>pyinstaller -F *.py</p><h2 id="多文件打包"><a href="#多文件打包" class="headerlink" title="多文件打包"></a>多文件打包</h2><ol><li>通过 pyi-makespec  *.py 会生成 .spec文件，修改spec的相关配置如下</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: python ; coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Analysis(</span><br><span class="line">    [<span class="string">'start_up.py'</span>],</span><br><span class="line">    pathex=[],</span><br><span class="line">    binaries=[],</span><br><span class="line">    datas=[],</span><br><span class="line">    hiddenimports=[<span class="string">'frozen_dir.py'</span>,<span class="string">'locallife_server.py'</span>,<span class="string">'locallife_gui.py'</span>],</span><br><span class="line">    hookspath=[],</span><br><span class="line">    hooksconfig=&#123;&#125;,</span><br><span class="line">    runtime_hooks=[],</span><br><span class="line">    excludes=[],</span><br><span class="line">    noarchive=<span class="keyword">False</span>,</span><br><span class="line">    optimize=<span class="number">0</span>,</span><br><span class="line">)</span><br><span class="line">pyz = PYZ(a.pure)</span><br><span class="line"></span><br><span class="line">exe = EXE(</span><br><span class="line">    pyz,</span><br><span class="line">    a.scripts,</span><br><span class="line">    a.binaries,</span><br><span class="line">    a.datas,</span><br><span class="line">    [],</span><br><span class="line">    name=<span class="string">'locallife_server'</span>,</span><br><span class="line">    debug=<span class="keyword">False</span>,</span><br><span class="line">    bootloader_ignore_signals=<span class="keyword">False</span>,</span><br><span class="line">    strip=<span class="keyword">False</span>,</span><br><span class="line">    upx=<span class="keyword">True</span>,</span><br><span class="line">    upx_exclude=[],</span><br><span class="line">    runtime_tmpdir=<span class="keyword">None</span>,</span><br><span class="line">    console=<span class="keyword">True</span>,</span><br><span class="line">    disable_windowed_traceback=<span class="keyword">False</span>,</span><br><span class="line">    argv_emulation=<span class="keyword">True</span>,</span><br><span class="line">    target_arch=<span class="keyword">None</span>,</span><br><span class="line">    codesign_identity=<span class="keyword">None</span>,</span><br><span class="line">    entitlements_file=<span class="keyword">None</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>2: 执行命令 pyinstaller *.spec</p><h2 id="命令参数介绍："><a href="#命令参数介绍：" class="headerlink" title="命令参数介绍："></a>命令参数介绍：</h2><p>-F 表示生成单个可执行文件</p><p>-w 表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那就把这个选项删除</p><p>-p 表示你自己自定义需要加载的类路径，一般情况下用不到</p><p>-i 表示可执行文件的图标</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="1-文件路径的问题"><a href="#1-文件路径的问题" class="headerlink" title="1.文件路径的问题"></a>1.文件路径的问题</h2><p>在源码里面通过os.path.dirname(<strong>file</strong>)就可以找到相对路径，如果通过pyinstaller打包会找不到文件路径，需要通过下面的代码去适配。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def app_path():</span><br><span class="line">    &quot;&quot;&quot;Returns the base application path.&quot;&quot;&quot;</span><br><span class="line">    if hasattr(sys, &apos;frozen&apos;):</span><br><span class="line">        # Handles PyInstaller</span><br><span class="line">        return os.path.dirname(sys.executable)  #使用pyinstaller打包后的exe目录</span><br><span class="line">    return os.path.dirname(__file__)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装pyinstaller&quot;&gt;&lt;a href=&quot;#安装pyinstaller&quot; class=&quot;headerlink&quot; title=&quot;安装pyinstaller&quot;&gt;&lt;/a&gt;安装pyinstaller&lt;/h1&gt;&lt;p&gt;pip install pyinstaller&lt;/p
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="打包" scheme="http://yoursite.com/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>curl 命令整理</title>
    <link href="http://yoursite.com/2023/04/10/curl-%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2023/04/10/curl-命令整理/</id>
    <published>2023-04-10T03:27:00.000Z</published>
    <updated>2023-04-10T03:44:14.944Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自动跳转"><a href="#自动跳转" class="headerlink" title="自动跳转"></a>自动跳转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L www.sina.com</span><br></pre></td></tr></table></figure><h3 id="显示头信息"><a href="#显示头信息" class="headerlink" title="显示头信息"></a>显示头信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i www.sina.com</span><br></pre></td></tr></table></figure><h3 id="显示请求显示各项时间指标"><a href="#显示请求显示各项时间指标" class="headerlink" title="显示请求显示各项时间指标"></a>显示请求显示各项时间指标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -o /dev/null -s -w ‘%&#123;time_total&#125;’ http://www.miotour.com</span><br><span class="line">curl -o /dev/null -s -w ‘%&#123;http_code&#125;’ http://www.miotour.com</span><br><span class="line">curl -o /dev/null -s -w %&#123;http_code&#125;:%&#123;time_connect&#125;:%&#123;time_starttransfer&#125;:%&#123;time_total&#125; http://www.miotour.com</span><br></pre></td></tr></table></figure><h3 id="显示通信信息"><a href="#显示通信信息" class="headerlink" title="显示通信信息"></a>显示通信信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -v www.sina.com</span><br><span class="line">curl --trace output.txt www.sina.com</span><br><span class="line">curl --trace-ascii output.txt www.sina.com</span><br></pre></td></tr></table></figure><h3 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -d &quot;user=Summer&amp;passwd=12345678&quot; &quot;http://127.0.0.1:8080/check_your_status&quot;</span><br><span class="line"></span><br><span class="line">curl -X POST --data &quot;data=xxx&amp;data1=1231&quot; example.com/form.cgi</span><br><span class="line">curl -X POST &quot;http://192.168.2.43:8801/graph/hashrate/search?minerType=1&amp;timeType=123&quot; -H &quot;accept: */*&quot; -H &quot;userId: 12&quot;</span><br><span class="line"></span><br><span class="line">post方法还可以这样，传递json数据</span><br><span class="line">curl -H &quot;Content-Type:application/json&quot; -X POST --data &apos;&#123;&quot;message&quot;: &quot;sunshine&quot;&#125;&apos; http://localhost:8000/</span><br></pre></td></tr></table></figure><h3 id="表达编码"><a href="#表达编码" class="headerlink" title="表达编码"></a>表达编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST--data-urlencode &quot;date=April 1&quot; example.com/form.cgi</span><br></pre></td></tr></table></figure><h3 id="添加头信息"><a href="#添加头信息" class="headerlink" title="添加头信息"></a>添加头信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl --user-agent &quot;[User Agent]&quot; [URL]</span><br><span class="line">curl --cookie &quot;name=xxx&quot; www.example.com</span><br></pre></td></tr></table></figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -T wordpress.zip ftp://james:123456@202.121.137.58/path/to/backup/</span><br><span class="line">curl -T data.tar.gz -u james sftp://202.121.137.58/</span><br></pre></td></tr></table></figure><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>重定向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L -o &apos;file.zip&apos; &apos;http://example.com/download.php?fileID=foo&apos;</span><br></pre></td></tr></table></figure><p>下载需要用户名，密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O ftp://james:123456@202.121.137.58:21/path/to/backup.tar.gz</span><br><span class="line">curl -O http://james:123456@202.121.137.58/file/path/data.tar.gz</span><br></pre></td></tr></table></figure><p>节省带框</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O --compressed &apos;http://example.com/large.report-tab.html&apos;</span><br></pre></td></tr></table></figure><p>显示下载进度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -# -O http://wordpress.org/latest.zip</span><br></pre></td></tr></table></figure><p>重命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o wordpress-3.8.zip &apos;http://wordpress.org/latest.zip&apos;</span><br></pre></td></tr></table></figure><p>带加密的连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl --ftp-ssl -u james:123456 -O ftp://202.121.137.58:21/backups/07/07/2012/mysql.blog.sql.tar.gz</span><br><span class="line">curl -u james -O sftp://202.121.137.58/backups/data.tar.gz</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;自动跳转&quot;&gt;&lt;a href=&quot;#自动跳转&quot; class=&quot;headerlink&quot; title=&quot;自动跳转&quot;&gt;&lt;/a&gt;自动跳转&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="运维" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>kubectl 的命令收集</title>
    <link href="http://yoursite.com/2023/03/21/kubectl-%E7%9A%84%E5%91%BD%E4%BB%A4%E6%94%B6%E9%9B%86/"/>
    <id>http://yoursite.com/2023/03/21/kubectl-的命令收集/</id>
    <published>2023-03-21T06:40:00.000Z</published>
    <updated>2023-04-10T03:43:56.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pod相关"><a href="#pod相关" class="headerlink" title="pod相关"></a>pod相关</h2><h3 id="获取某个项目的包含的pod"><a href="#获取某个项目的包含的pod" class="headerlink" title="获取某个项目的包含的pod"></a>获取某个项目的包含的pod</h3><p>kubectl get pod -ncentralsystem</p><h2 id="日志相关"><a href="#日志相关" class="headerlink" title="日志相关"></a>日志相关</h2><h3 id="查看某个pod日志"><a href="#查看某个pod日志" class="headerlink" title="查看某个pod日志"></a>查看某个pod日志</h3><p>kubectl logs -f api-interface-6d489d7f49-7j4b7 -ncentralsystem</p><h2 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h2><h3 id="查看某个配置"><a href="#查看某个配置" class="headerlink" title="查看某个配置"></a>查看某个配置</h3><p>kubectl get cm centralsystem-mongodb-cm -ncentralsystem -oyaml</p><h3 id="删除某个配置"><a href="#删除某个配置" class="headerlink" title="删除某个配置"></a>删除某个配置</h3><p>kubectl delete cm mongodb-cert</p><h2 id="镜像里面内容"><a href="#镜像里面内容" class="headerlink" title="镜像里面内容"></a>镜像里面内容</h2><h3 id="查看镜像的内容"><a href="#查看镜像的内容" class="headerlink" title="查看镜像的内容"></a>查看镜像的内容</h3><p>kubectl exec -it api-interface-f644fdd64-z4999 sh -ncentralsystem</p><h2 id="查看某个镜像的配置信息"><a href="#查看某个镜像的配置信息" class="headerlink" title="查看某个镜像的配置信息"></a>查看某个镜像的配置信息</h2><p>kubectl describe pods/api-interface-576475f4f5-k6sln -ncentralsystem</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;pod相关&quot;&gt;&lt;a href=&quot;#pod相关&quot; class=&quot;headerlink&quot; title=&quot;pod相关&quot;&gt;&lt;/a&gt;pod相关&lt;/h2&gt;&lt;h3 id=&quot;获取某个项目的包含的pod&quot;&gt;&lt;a href=&quot;#获取某个项目的包含的pod&quot; class=&quot;header
      
    
    </summary>
    
      <category term="运维" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>vue环境搭建</title>
    <link href="http://yoursite.com/2023/01/11/vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2023/01/11/vue环境搭建/</id>
    <published>2023-01-11T03:32:00.000Z</published>
    <updated>2023-01-11T09:05:20.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node-安装"><a href="#node-安装" class="headerlink" title="node 安装"></a>node 安装</h1><p>  <a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">node官网</a></p><h2 id="node-版本查看"><a href="#node-版本查看" class="headerlink" title="node 版本查看"></a>node 版本查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    node -V</span><br><span class="line">    npm -v</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line"># cnpm 安装</span><br></pre></td></tr></table></figure><p>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># vue 脚手架安装</span><br></pre></td></tr></table></figure><p>  cnpm i -g @vue/cli</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 创建一个新的vue项目</span><br></pre></td></tr></table></figure><p>vue create vue-demo –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p><pre><code>## vue项目的选择1. 在vue 里面可以选择初始化需要的基本配置,2. vue的版本(2.0和3.0有很大的区别,很多包可能只支持特定的版本号,需要仔细区分).# 下载指定版本的node包当没有制定版本的时候,默认下载最新的包,最新的包可能和vue的版本不兼容,需要需要设置特定的版本</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;node-安装&quot;&gt;&lt;a href=&quot;#node-安装&quot; class=&quot;headerlink&quot; title=&quot;node 安装&quot;&gt;&lt;/a&gt;node 安装&lt;/h1&gt;&lt;p&gt;  &lt;a href=&quot;https://nodejs.org/zh-cn/download/&quot; tar
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vu e" scheme="http://yoursite.com/tags/vu-e/"/>
    
  </entry>
  
  <entry>
    <title>mysql 中文全文检索</title>
    <link href="http://yoursite.com/2022/10/26/mysql-%E5%85%A8%E6%96%87%E7%B4%A2%E5%BC%95/"/>
    <id>http://yoursite.com/2022/10/26/mysql-全文索引/</id>
    <published>2022-10-26T09:37:08.000Z</published>
    <updated>2024-06-04T01:05:01.275Z</updated>
    
    <content type="html"><![CDATA[<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>在我们项目里面主要需要通过用户的名字或者户籍地址,居住地址来查询数据,正常情况下索引只能同nomal 索引,但%%的模糊搜索都是全表扫描,提高不了任何的性能.这个时候是使用mysql的全文索引的好时候.</p><h3 id="默认分词索引的问题"><a href="#默认分词索引的问题" class="headerlink" title="默认分词索引的问题:"></a>默认分词索引的问题:</h3><p>ngram全文解析器默认的分词是两个为单位,如果在业务场景中需要通过姓氏之类的查询,需要修改mysql的默认配置.</p><p><img src="/images/pasted-17.png" alt="upload successful"></p><p>参看资料</p><p><a href="https://www.jianshu.com/p/c48106149b6a" target="_blank" rel="noopener">https://www.jianshu.com/p/c48106149b6a</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h3&gt;&lt;p&gt;在我们项目里面主要需要通过用户的名字或者户籍地址,居住地址来查询数据,正常情况下索引只能同nomal 索引,但%%的模糊搜索
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>技术经验高并发总结第一篇</title>
    <link href="http://yoursite.com/2022/08/24/%E6%8A%80%E6%9C%AF%E5%B7%A5%E4%BD%9C%E8%80%85%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93-%E6%8A%80%E6%9C%AF%E7%BB%8F%E9%AA%8C-%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>http://yoursite.com/2022/08/24/技术工作者工作经验总结-技术经验-第一篇/</id>
    <published>2022-08-24T02:30:23.000Z</published>
    <updated>2022-09-30T08:32:05.511Z</updated>
    
    <content type="html"><![CDATA[<h3 id="FutureTask的使用"><a href="#FutureTask的使用" class="headerlink" title="FutureTask的使用"></a>FutureTask的使用</h3><h4 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h4><p>我这边需要提供一个接口给客户端,这个接口需要请求外部接口20次,在这种场景下,我需要如何设计我的这个接口?</p><h5 id="解决方案java篇"><a href="#解决方案java篇" class="headerlink" title="解决方案java篇"></a>解决方案java篇</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">List&lt;FutureTask&lt;List&lt;String&gt;&gt;&gt; tasks=new ArrayList&lt;&gt;(10);</span><br><span class="line">           for(int i=0;i&lt;repeat;i++)&#123;</span><br><span class="line">               FutureTask&lt;List&lt;String&gt;&gt; futureTask = new FutureTask&lt;&gt;(() -&gt; mobileComponent.getMobileList(numProvinceCode, numCityCode, req.getSearchValue()));</span><br><span class="line">               threadPoolTaskExecutor.execute(futureTask);</span><br><span class="line">               tasks.add(futureTask);</span><br><span class="line">           &#125;</span><br><span class="line">           tasks.forEach(task-&gt;&#123;</span><br><span class="line">               try &#123;</span><br><span class="line">                   mobileList.addAll(task.get());</span><br><span class="line">               &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                   log.error(&quot;获取手机号码 失败,请求串= &#123;&#125;&quot;, JSON.toJSONString(req),e);</span><br><span class="line">               &#125; catch (ExecutionException e) &#123;</span><br><span class="line">                   log.error(&quot;获取手机号码 失败 = &#123;&#125;&quot;, JSON.toJSONString(req),e);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure><h3 id="长短缓存的使用"><a href="#长短缓存的使用" class="headerlink" title="长短缓存的使用"></a>长短缓存的使用</h3><h4 id="场景一-1"><a href="#场景一-1" class="headerlink" title="场景一"></a>场景一</h4><p>在高并发场景中,如何防止缓存穿透的问题,如果没想清楚的情况下,可能认为加锁就能解决问题了,但在锁失效的情况下,其实还是没办法保证有多少的线程在锁失效的情况下落到了db里面,这就是一个考验运气的问题.,所以需要用到长短缓存去既能保证数据更新的实时性,又能保证不管在如何的高并发下,落到db的查询永远只有一条,这才能真正解决缓存穿透导致雪崩的问题.</p><h5 id="解决方案java篇-1"><a href="#解决方案java篇-1" class="headerlink" title="解决方案java篇"></a>解决方案java篇</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public boolean isBlack(Long cardId, Integer areaCode) &#123;</span><br><span class="line">     String shortKey = &quot;cache_card_black_short_&quot; + cardId;</span><br><span class="line">     String longKey = &quot;cache_card_black_long_&quot; + cardId;</span><br><span class="line">     List&lt;Integer&gt; areaCodes;</span><br><span class="line">     if (redisTemplate.hasKey(shortKey)) &#123;</span><br><span class="line">         //先从短缓存里面获取数据</span><br><span class="line">         areaCodes = (List&lt;Integer&gt;) redisTemplate.opsForValue().get(shortKey);</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">         Lock lock = redisson.getLock(LockPrefix.CARD_BLACK_AREA + cardId);</span><br><span class="line">         //如果获取到锁，从数据库里面获取数据，放到长短缓存里面</span><br><span class="line">         if (lock.tryLock()) &#123;</span><br><span class="line">             try &#123;</span><br><span class="line">                 areaCodes = refresh(cardId, shortKey, longKey);</span><br><span class="line">             &#125; finally &#123;</span><br><span class="line">                 lock.unlock();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; else &#123;</span><br><span class="line">             if (redisTemplate.hasKey(longKey)) &#123;</span><br><span class="line">                 areaCodes = (List&lt;Integer&gt;) redisTemplate.opsForValue().get(longKey);</span><br><span class="line">             &#125; else &#123;</span><br><span class="line">                 Lock longLock = redisson.getLock(LockPrefix.CARD_BLACK_AREA_LONG + cardId);</span><br><span class="line">                 try &#123;</span><br><span class="line">                     longLock.lock();</span><br><span class="line">                     areaCodes = refresh(cardId, shortKey, longKey);</span><br><span class="line">                 &#125; finally &#123;</span><br><span class="line">                     longLock.unlock();</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     return areaCodes.contains(areaCode);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> private List&lt;Integer&gt; refresh(Long cardId, String shortKey, String longKey) &#123;</span><br><span class="line">     List&lt;CardBlackArea&gt; blackAreas = this.baseMapper.lambdaQuery().eq(CardBlackArea::getCardId, cardId).list();</span><br><span class="line">     List&lt;Integer&gt; areaCodes = blackAreas.stream().map(a -&gt; a.getAreaCode()).collect(Collectors.toList());</span><br><span class="line">     redisTemplate.opsForValue().set(shortKey, areaCodes, 5, TimeUnit.MINUTES);</span><br><span class="line">     redisTemplate.opsForValue().set(longKey, areaCodes, 1, TimeUnit.DAYS);</span><br><span class="line">     return areaCodes;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;FutureTask的使用&quot;&gt;&lt;a href=&quot;#FutureTask的使用&quot; class=&quot;headerlink&quot; title=&quot;FutureTask的使用&quot;&gt;&lt;/a&gt;FutureTask的使用&lt;/h3&gt;&lt;h4 id=&quot;场景一&quot;&gt;&lt;a href=&quot;#场景一&quot; c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>技术工作者工作经验总结(代码规范)第一篇</title>
    <link href="http://yoursite.com/2022/08/24/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E4%B8%80/"/>
    <id>http://yoursite.com/2022/08/24/工作经验总结一/</id>
    <published>2022-08-24T02:23:51.000Z</published>
    <updated>2022-08-24T02:29:24.650Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-做好接口规范-可以使用restapi规范"><a href="#1-做好接口规范-可以使用restapi规范" class="headerlink" title="1.做好接口规范,可以使用restapi规范"></a>1.做好接口规范,可以使用restapi规范</h3><h4 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">今天项目经理给我发了一个客户需求,如下:</span><br><span class="line"> 系统日志导出的近3个月的用户访问记录、业务办理记录等（Excel格式，需去重）.</span><br><span class="line">我一看,接口操作日志我们目前是记录了,但是业务目前我们的接口写的很随意,有很多新增是inport,add,insert 各种形式的都有,完全没办法通过接口的形式去区分是什么是业务办理,什么是用户访问记录,尴尬</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-做好接口规范-可以使用restapi规范&quot;&gt;&lt;a href=&quot;#1-做好接口规范-可以使用restapi规范&quot; class=&quot;headerlink&quot; title=&quot;1.做好接口规范,可以使用restapi规范&quot;&gt;&lt;/a&gt;1.做好接口规范,可以使用restapi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>centos7 bsc公链全节点搭建</title>
    <link href="http://yoursite.com/2021/09/18/bsc%E5%85%AC%E9%93%BE%E5%85%A8%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2021/09/18/bsc公链全节点搭建/</id>
    <published>2021-09-18T06:44:27.000Z</published>
    <updated>2022-10-31T07:54:30.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快照安装过程"><a href="#快照安装过程" class="headerlink" title="快照安装过程"></a>快照安装过程</h1><h2 id="前置条件安装"><a href="#前置条件安装" class="headerlink" title="前置条件安装"></a>前置条件安装</h2><h3 id="git-环境安装"><a href="#git-环境安装" class="headerlink" title="git 环境安装"></a>git 环境安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install https://packages.endpoint.com/rhel/7/os/x86_64/endpoint-repo-1.7-1.x86_64.rpm</span><br><span class="line">yum install git</span><br></pre></td></tr></table></figure><h3 id="go-环境安装"><a href="#go-环境安装" class="headerlink" title="go 环境安装"></a>go 环境安装</h3><ol><li><p>下载地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">标准官网：https://golang.org/ 需要墙</span><br><span class="line">镜像官网：https://golang.google.cn/dl/ 【国内推荐】</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf go*.linux-amd64.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure></li><li><p>添加环境变量</p></li></ol><p>vi /etc/profile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export GO111MODULE=on</span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOPATH=/home/gopath</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br></pre></td></tr></table></figure><h3 id="nginx-安装"><a href="#nginx-安装" class="headerlink" title="nginx 安装"></a>nginx 安装</h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><p>  配置 bsc.conf</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen       443;</span><br><span class="line">      server_name  www.tianyisec.com;</span><br><span class="line">      # ssl证书地址</span><br><span class="line">      ssl_certificate     /etc/nginx/conf.d/6319711_www.tianyisec.com.pem;  # pem文件的路径</span><br><span class="line">      ssl_certificate_key  /etc/nginx/conf.d/6319711_www.tianyisec.com.key; # key文件的路径</span><br><span class="line"></span><br><span class="line">       # ssl验证相关配置</span><br><span class="line">      ssl_session_timeout  5m;    #缓存有效期</span><br><span class="line">      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    #加密算法</span><br><span class="line">      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    #安全链接可选的加密协议</span><br><span class="line">      ssl_prefer_server_ciphers on;   #使用服务器端的首选算法</span><br><span class="line">      location / &#123;</span><br><span class="line">         add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</span><br><span class="line">         add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS, PUT, DELETE&apos;;</span><br><span class="line">         add_header &apos;Access-Control-Allow-Headers&apos; &apos;Content-Type&apos;;</span><br><span class="line">         proxy_pass         http://localhost:8876;</span><br><span class="line">         proxy_set_header   X-Forwarded-Proto $scheme;</span><br><span class="line">         proxy_set_header   Host              $http_host;</span><br><span class="line">         proxy_set_header   X-Real-IP         $remote_addr;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>下载bsc 快照数据</li></ol><p>使用快照的原因，从0开始同步数据会很慢，所以需要通过快照的加快区块的同步过程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/binance-chain/bsc-snapshots</span><br></pre></td></tr></table></figure><p>下载命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup  wget -O geth.tar.gz &quot;snapurl&quot; &gt;/dev/null 2&gt;log &amp;</span><br></pre></td></tr></table></figure><p>另外一种下载方式,据说数据很快,有机会可以试下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt install aria2</span><br><span class="line"></span><br><span class="line">aria2c -o geth.tar.lz4 -s14 -x14 -k100M https://download.bsc-snapshot.workers.dev/&#123;filename&#125; -o geth.tar.lz4</span><br></pre></td></tr></table></figure><p>原文<br><a href="https://bbs.quantclass.cn/thread/15841" target="_blank" rel="noopener">https://bbs.quantclass.cn/thread/15841</a><br>2. 下载 bsc  安装文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/binance-chain/bsc/releases</span><br></pre></td></tr></table></figure><ol start="3"><li>下载初始化配置文件</li></ol><p>主网</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/binance-chain/bsc/releases/download/v1.1.2/mainnet.zip</span><br><span class="line">unzip mainnet.zip</span><br></pre></td></tr></table></figure><p>测试网络</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/binance-chain/bsc/releases/download/v1.1.2/testnet.zip</span><br><span class="line">unzip testnet.zip</span><br></pre></td></tr></table></figure><p>config.toml 节点配置修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Node]</span><br><span class="line">IPCPath = &quot;geth.ipc&quot;</span><br><span class="line">HTTPHost = &quot;0.0.0.0&quot;</span><br><span class="line">NoUSB = true</span><br><span class="line">InsecureUnlockAllowed = false</span><br><span class="line">HTTPPort = 8876</span><br><span class="line">HTTPVirtualHosts = [&quot;*&quot;]</span><br><span class="line">HTTPModules = [&quot;eth&quot;, &quot;net&quot;, &quot;web3&quot;, &quot;txpool&quot;, &quot;parlia&quot;]</span><br><span class="line">WSPort = 8877    </span><br><span class="line">WSModules = [&quot;net&quot;, &quot;web3&quot;, &quot;eth&quot;]</span><br></pre></td></tr></table></figure><ol start="4"><li>初始化（当从快照执行的时候不用）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir node init genesis.json</span><br></pre></td></tr></table></figure><ol start="5"><li>运行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup geth --config ./config.toml --datadir ./server/data-seed/geth  --cache 30720 --rpc.allow-unprotected-txs --txlookuplimit 0 &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>cache: 以m为单位，缓存设置约大，同步数据越快,目前设置为32G。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="同步速度跟不上主链的高度"><a href="#同步速度跟不上主链的高度" class="headerlink" title="同步速度跟不上主链的高度"></a>同步速度跟不上主链的高度</h2><h3 id="添加常用节点"><a href="#添加常用节点" class="headerlink" title="添加常用节点"></a>添加常用节点</h3><p>节点设置： <datadir>/geth/static-nodes.json:</datadir></p><h3 id="信任节点设置"><a href="#信任节点设置" class="headerlink" title="信任节点设置"></a>信任节点设置</h3><p>节点设置： <datadir>/geth/trusted-nodes.json </datadir></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://docs.binance.org/smart-chain/developer/fullnode.html" target="_blank" rel="noopener">https://docs.binance.org/smart-chain/developer/fullnode.html</a></p><h1 id="一些常用的命令"><a href="#一些常用的命令" class="headerlink" title="一些常用的命令"></a>一些常用的命令</h1><ol><li>查看节点最新同步的区块高度</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s -H Content-Type:application/json -X POST --data &apos;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;eth_blockNumber&quot;,&quot;params&quot;:[],&quot;id&quot;:1&#125;&apos; http://127.0.0.1:8876</span><br></pre></td></tr></table></figure><ol start="2"><li>查看是否同步完成</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s -H Content-Type:application/json -X POST --data &apos;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;eth_syncing&quot;,&quot;params&quot;:[],&quot;id&quot;:1&#125;&apos; http://127.0.0.1:8876</span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">geth attach http://localhost:8545</span><br><span class="line">eth.syncing</span><br><span class="line">eth.blockNumber</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;快照安装过程&quot;&gt;&lt;a href=&quot;#快照安装过程&quot; class=&quot;headerlink&quot; title=&quot;快照安装过程&quot;&gt;&lt;/a&gt;快照安装过程&lt;/h1&gt;&lt;h2 id=&quot;前置条件安装&quot;&gt;&lt;a href=&quot;#前置条件安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用python 调用 defi 函数</title>
    <link href="http://yoursite.com/2021/09/17/%E4%BD%BF%E7%94%A8python-%E8%B0%83%E7%94%A8-defi-%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2021/09/17/使用python-调用-defi-函数/</id>
    <published>2021-09-16T21:30:11.000Z</published>
    <updated>2021-10-25T01:42:48.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-web3-py"><a href="#安装-web3-py" class="headerlink" title="安装 web3 py"></a>安装 web3 py</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install web3</span><br></pre></td></tr></table></figure><h2 id="连接节点的最常用方法是"><a href="#连接节点的最常用方法是" class="headerlink" title="连接节点的最常用方法是"></a>连接节点的最常用方法是</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.IPC（使用本地文件系统：最快，最安全）</span><br><span class="line">2.Websockets（远程工作，比 HTTP 更快,但一般只有私人节点开发）</span><br><span class="line">3.HTTP（更多节点支持它）</span><br></pre></td></tr></table></figure><p>具体的参考资料网上很多</p><h2 id="合约调用代码demo"><a href="#合约调用代码demo" class="headerlink" title="合约调用代码demo"></a>合约调用代码demo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">swap 合约  新币抢链机器人</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import json</span><br><span class="line">import requests</span><br><span class="line">from web3 import Web3</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getAbi(contract_address):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    :param contract_address: 合约地址</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    url_scan = &quot;https://api.bscscan.com/api?module=contract&amp;action=getabi&amp;address=&quot; + str(contract_address)</span><br><span class="line">    r = requests.get(url=url_scan)</span><br><span class="line">    response = r.json()</span><br><span class="line">    abi = json.loads(response[&quot;result&quot;])</span><br><span class="line">    return abi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 交换虚拟货币</span><br><span class="line">def swap():</span><br><span class="line">    contract_address = web3.toChecksumAddress(router_contract_address)</span><br><span class="line">    contract = web3.eth.contract(address=contract_address,</span><br><span class="line">                                 abi=contract_abi)</span><br><span class="line">    # 交易对</span><br><span class="line">    pair = [token_in, token_out]</span><br><span class="line">    amounts = contract.functions.getAmountsOut(amount_in, pair).call()</span><br><span class="line">    amount_out_min = amounts[1] * (1 - slippage)</span><br><span class="line">    if amount_out_min &lt; min_buy_token_amount:</span><br><span class="line">        print(&quot;目前能买到的币数量为: &#123;0&#125;,最小购买的币数量为: &#123;1&#125;,已经小于最小购买数量&quot;.format(amount_out_min, min_buy_token_amount))</span><br><span class="line">        return</span><br><span class="line">    # 开始交易</span><br><span class="line">    txn = contract.functions.swapExactTokensForTokens(</span><br><span class="line">        amount_in,</span><br><span class="line">        amount_out_min,</span><br><span class="line">        pair,</span><br><span class="line">        # 接收人的币种地址</span><br><span class="line">        address,</span><br><span class="line">        (int(time.time()) + 10000)</span><br><span class="line">    ).buildTransaction(&#123;</span><br><span class="line">        &apos;chainId&apos;: 56,</span><br><span class="line">        &apos;from&apos;: address,</span><br><span class="line">        # 手续费根据需要加大</span><br><span class="line">        &apos;gas&apos;: gas,</span><br><span class="line">        &apos;gasPrice&apos;: web3.eth.gasPrice,</span><br><span class="line">        &apos;nonce&apos;: nonce,</span><br><span class="line">    &#125;)</span><br><span class="line">    signed_txn = web3.eth.account.sign_transaction(txn, private_key=private_key)</span><br><span class="line">    tx_token = web3.eth.send_raw_transaction(signed_txn.rawTransaction)</span><br><span class="line">    print(&quot;swap token tx is &#123;0&#125;&quot;.format(web3.toHex(tx_token)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # 币安的写成币安的地址</span><br><span class="line">    url = &quot;https://bsc-dataseed1.binance.org&quot;</span><br><span class="line">    web3 = Web3(Web3.HTTPProvider(url))</span><br><span class="line">    # pancake 智能合约</span><br><span class="line">    router_contract_address = &quot;0x10ED43C718714eb63d5aA57B78B54704E256024E&quot;</span><br><span class="line">    # 钱包私钥信息</span><br><span class="line">    private_key = &quot;&quot;</span><br><span class="line">    # 钱包地址</span><br><span class="line">    address = web3.toChecksumAddress(&quot;&quot;)</span><br><span class="line">    # 发送的币种信息</span><br><span class="line">    send_token_address = &quot;0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c&quot;</span><br><span class="line">    # 交易的币种信息</span><br><span class="line">    buy_token_address = &quot;0xfbb4f2f342c6daab63ab85b0226716c4d1e26f36&quot;</span><br><span class="line">    # 交易的币数量</span><br><span class="line">    send_token_amount = 0.3</span><br><span class="line">    # 最小买入金额</span><br><span class="line">    min_buy_token_amount = 2000</span><br><span class="line">    # 燃烧的gas 费</span><br><span class="line">    gas = 7000000</span><br><span class="line">    # 间隔时间</span><br><span class="line">    split_second = 5</span><br><span class="line">    # 滑点 0.5 = 50%</span><br><span class="line">    slippage = 0.5</span><br><span class="line"></span><br><span class="line">    amount_in = Web3.toWei(send_token_amount, &apos;ether&apos;)</span><br><span class="line">    token_in = Web3.toChecksumAddress(send_token_address)</span><br><span class="line">    token_out = Web3.toChecksumAddress(buy_token_address)</span><br><span class="line">    nonce = web3.eth.getTransactionCount(address)</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            swap()</span><br><span class="line">            nonce = nonce + 1</span><br><span class="line">        except ValueError as e:</span><br><span class="line">            print(&quot;swap error &#123;0&#125;&quot;.format(e))</span><br><span class="line">        time.sleep(split_second)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-web3-py&quot;&gt;&lt;a href=&quot;#安装-web3-py&quot; class=&quot;headerlink&quot; title=&quot;安装 web3 py&quot;&gt;&lt;/a&gt;安装 web3 py&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mysql-innerdb优化</title>
    <link href="http://yoursite.com/2021/08/23/mysql-innerdb%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2021/08/23/mysql-innerdb优化/</id>
    <published>2021-08-23T08:55:52.000Z</published>
    <updated>2023-03-13T02:16:52.696Z</updated>
    
    <content type="html"><![CDATA[<h3 id="join-buffer-size"><a href="#join-buffer-size" class="headerlink" title="join_buffer_size"></a>join_buffer_size</h3><p>该值主要是用来设置 两个table的join操作 会用到的最大内存值。设置的值越大，一次性读取到内存中的数据越多，可以提供join操作的性能。一般情况下建议是设置8m-16m。<br><img src="/images/pasted-15.png" alt="upload successful"></p><h4 id="想要临时调整为-1G应该如下操作"><a href="#想要临时调整为-1G应该如下操作" class="headerlink" title="想要临时调整为 1G应该如下操作"></a>想要临时调整为 1G应该如下操作</h4><p>select /*+  set_var(join_buffer_size=1G) */ * from …;</p><h3 id="InnoDB-buffer-pool-size"><a href="#InnoDB-buffer-pool-size" class="headerlink" title="InnoDB_buffer_pool_size"></a>InnoDB_buffer_pool_size</h3><p>这个参数定义InnoDB存储引擎的表数据和索引数据的最大内存缓冲区,InnoDB_buffer_pool_size参数同时提供为数据块和索引块做缓存.这个值设置的越高,访问表中数据需要的磁盘IO就越少.</p><h3 id="InnoDB-lock-wait-timeout"><a href="#InnoDB-lock-wait-timeout" class="headerlink" title="InnoDB_lock_wait_timeout"></a>InnoDB_lock_wait_timeout</h3><p>这个参数自动检测行锁导致的死锁并进行相应处理,但是对于表锁导致的死锁不能自动检测默认值为50秒.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;join-buffer-size&quot;&gt;&lt;a href=&quot;#join-buffer-size&quot; class=&quot;headerlink&quot; title=&quot;join_buffer_size&quot;&gt;&lt;/a&gt;join_buffer_size&lt;/h3&gt;&lt;p&gt;该值主要是用来设置 两个ta
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gogs drone搭建java自动化部署</title>
    <link href="http://yoursite.com/2020/12/23/drone%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2020/12/23/drone自动化部署/</id>
    <published>2020-12-23T06:42:00.000Z</published>
    <updated>2023-12-18T07:02:05.182Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一步docker-部署"><a href="#第一步docker-部署" class="headerlink" title="第一步docker 部署"></a>第一步docker 部署</h3><p>docker 安装</p><p>docker-compose 安装</p><h3 id="新建docker-compose"><a href="#新建docker-compose" class="headerlink" title="新建docker-compose"></a>新建docker-compose</h3><p>网上很多资料目前已经过时很久,官网的配置又不够无脑化,折腾了好几天查找资料.</p><h4 id="可以参考的资料"><a href="#可以参考的资料" class="headerlink" title="可以参考的资料"></a>可以参考的资料</h4><p><a href="https://blog.csdn.net/uisoul/article/details/113554242" target="_blank" rel="noopener">https://blog.csdn.net/uisoul/article/details/113554242</a></p><h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3.5&apos;</span><br><span class="line">services:</span><br><span class="line">  gogs:</span><br><span class="line">    image: gogs/gogs:0.12</span><br><span class="line">    container_name:  mobile-gogs</span><br><span class="line">    volumes:</span><br><span class="line">      - ./gogs:/data</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3000:3000&quot;</span><br><span class="line"></span><br><span class="line">  drone-server:</span><br><span class="line">    image: drone/drone:2.12.1</span><br><span class="line">    container_name:  mobile-drone-server</span><br><span class="line">    ports:</span><br><span class="line">      - 8000:80</span><br><span class="line">    volumes:</span><br><span class="line">      - /var/lib/drone:/data</span><br><span class="line">      - /var/run/docker.sock:/var/run/docker.sock</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">      - DRONE_AGENTS_ENABLED=true</span><br><span class="line">      - DRONE_SERVER_PROTO=http</span><br><span class="line">      - DRONE_OPEN=true</span><br><span class="line">      - DRONE_SERVER_HOST= 宿主机ip:8000</span><br><span class="line">      - DRONE_USER_CREATE=username:kerns,admin:true</span><br><span class="line">      - DRONE_GOGS_SERVER=http://宿主机ip:3000</span><br><span class="line">      - DRONE_RPC_SECRET=ALQU2M0KdptXUdTPKcEw </span><br><span class="line">      - DRONE_DEBUG=true</span><br><span class="line">      - DRONE_LOGS_TRACE=true</span><br><span class="line">      - DRONE_LOGS_DEBUG=true</span><br><span class="line">      - DRONE_LOGS_PRETTY=true</span><br><span class="line">      - DRONE_GIT_ALWAYS_AUTH=false</span><br><span class="line"></span><br><span class="line">  drone-runner-docker:     </span><br><span class="line">    image: drone/drone-runner-docker:1.8.2            </span><br><span class="line">    container_name:  mobile-drone-runner-docker</span><br><span class="line">    ports:</span><br><span class="line">      - 10081:3000</span><br><span class="line">    depends_on:</span><br><span class="line">      - drone-server  </span><br><span class="line">    volumes:</span><br><span class="line">      - /var/run/docker.sock:/var/run/docker.sock</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">      - DRONE_DEBUG=true</span><br><span class="line">      - DRONE_RPC_PROTO=http</span><br><span class="line">      - DRONE_RPC_HOST=drone-server</span><br><span class="line">      - DRONE_RPC_SECRET=ALQU2M0KdptXUdTPKcEw</span><br><span class="line">      - DRONE_RUNNER_CAPACITY=2</span><br><span class="line">networks:</span><br><span class="line">  dronenet:</span><br><span class="line">    external: true # 使用外部网络, 需先创建网络</span><br></pre></td></tr></table></figure><h3 id="启动完之后配置"><a href="#启动完之后配置" class="headerlink" title="启动完之后配置"></a>启动完之后配置</h3><ol><li><p>gogs 地址 : <a href="http://ip:3000/" target="_blank" rel="noopener">http://ip:3000/</a>  </p><p>gogs类似gitlab，做代码管理的工具，刚开始安装的时候你需要自己创建帐号密码，然后把自己的项目推送到环境上去。</p></li></ol><p><img src="/images/pasted-12.png" alt="upload successful"></p><p>需要查看下钩子能否推送到drone这边，有可能配置错误，导致推送不成功。点击编辑里面有一个测试推送的设置，默认hook是不需要鉴权的。</p><p><img src="/images/pasted-13.png" alt="upload successful"></p><ol start="2"><li>drone 的默认地址: <a href="http://ip:8000/" target="_blank" rel="noopener">http://ip:8000/</a>   </li></ol><p><img src="/images/pasted-14.png" alt="upload successful"></p><p>当gogs配置好之后，drone 默认基本不需要变动，不过服务器的配置可以在drone里面去配置，可以在.drone.yml里面写死，但是不如在drone配置可以统一管理和保密。</p><h4 id="java-的配置文件"><a href="#java-的配置文件" class="headerlink" title="java 的配置文件"></a>java 的配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">kind: pipeline</span><br><span class="line">type: docker</span><br><span class="line">name: mobile-h5-backend</span><br><span class="line">workspace:</span><br><span class="line">  base: /var/javaproject/src</span><br><span class="line">  path: mobile-h5-backend</span><br><span class="line"></span><br><span class="line">steps:</span><br><span class="line">  - name: build</span><br><span class="line">    image: maven:3.6.3-openjdk-8</span><br><span class="line">    volumes: # 将容器内目录挂载到宿主机，仓库需要开启Trusted设置</span><br><span class="line">      - name: maven-cache</span><br><span class="line">        path: /root/.m2   # maven 的默认路径，/账号名字/.m2 所以这块理论上和操作的账号很有关系</span><br><span class="line">    environment:</span><br><span class="line">      GOOS: linux</span><br><span class="line">      GOARCH: amd64</span><br><span class="line">    commands:</span><br><span class="line">      - echo &quot;start build mobile h5 backend&quot;</span><br><span class="line">      - mvn  clean package -Pprod -Dmaven.test.skip=true</span><br><span class="line"></span><br><span class="line">  - name: deploy</span><br><span class="line">    image: appleboy/drone-scp</span><br><span class="line">    settings:</span><br><span class="line">      host:</span><br><span class="line">        - 121.199.51.109</span><br><span class="line">      port:</span><br><span class="line">        from_secret: port</span><br><span class="line">      username:</span><br><span class="line">        from_secret: username</span><br><span class="line">      password:</span><br><span class="line">        from_secret: password</span><br><span class="line">      target:</span><br><span class="line">        - /root/card-h5-backend</span><br><span class="line">      source: ./target/card-h5-backend-assembly.tar.gz</span><br><span class="line">      rm: true</span><br><span class="line">      when:</span><br><span class="line">        branch:</span><br><span class="line">          - master</span><br><span class="line"></span><br><span class="line">  - name: run</span><br><span class="line">    image: appleboy/drone-ssh</span><br><span class="line">    settings:</span><br><span class="line">      host:</span><br><span class="line">        - 121.199.51.109</span><br><span class="line">      port:</span><br><span class="line">        from_secret: port</span><br><span class="line">      username:</span><br><span class="line">        from_secret: username</span><br><span class="line">      password:</span><br><span class="line">        from_secret: password</span><br><span class="line">      command_timeout: 2m</span><br><span class="line">      script:</span><br><span class="line">        - cd /root/card-h5-backend/target</span><br><span class="line">        - tar -zxvf card-h5-backend-assembly.tar.gz</span><br><span class="line">        - ./card-h5-backend/bin/kill.sh &amp;&amp; ./card-h5-backend/bin/start.sh prod 1024</span><br><span class="line"></span><br><span class="line">volumes: # 定义流水线挂载目录，用于共享数据</span><br><span class="line">  - name: maven-cache</span><br><span class="line">    host:</span><br><span class="line">      path: /root/drone/maven/cache</span><br><span class="line">trigger:</span><br><span class="line">  branch:</span><br><span class="line">    - master</span><br></pre></td></tr></table></figure><p>配置文件的说明</p><ol><li>基于maven镜像我们可能需要配置自己的私服，这种情况下，需要把配置文件放到/root/drone/maven/cache目录下,maven镜像会直接使用你的settings-docker.xml配置</li></ol><p><img src="/images/pasted-18.png" alt="upload successful"></p><h3 id="镜像源的修改"><a href="#镜像源的修改" class="headerlink" title="镜像源的修改"></a>镜像源的修改</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一步docker-部署&quot;&gt;&lt;a href=&quot;#第一步docker-部署&quot; class=&quot;headerlink&quot; title=&quot;第一步docker 部署&quot;&gt;&lt;/a&gt;第一步docker 部署&lt;/h3&gt;&lt;p&gt;docker 安装&lt;/p&gt;
&lt;p&gt;docker-compos
      
    
    </summary>
    
      <category term="运维" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="部署" scheme="http://yoursite.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>团队协作工具整理</title>
    <link href="http://yoursite.com/2020/12/15/%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2020/12/15/团队协作工具整理/</id>
    <published>2020-12-15T02:57:32.000Z</published>
    <updated>2022-08-24T02:43:49.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="办公聊天工具"><a href="#办公聊天工具" class="headerlink" title="办公聊天工具"></a>办公聊天工具</h2><ul><li>slack </li></ul><p>集成了很多的开发工具，你可以想安装插件一样在里面添加一些bug追踪工具，聊天的方式也更加的贴合远程协作的开发。对各个终端的支持也很全面，支持ios，android，mac和window端。</p><ul><li><p>Rocket Chat</p><p>slack 开源替代，没有聊天加密的功能</p></li></ul><h2 id="原型设计协作"><a href="#原型设计协作" class="headerlink" title="原型设计协作"></a>原型设计协作</h2><ul><li><a href="https://axhub.im/" target="_blank" rel="noopener">axhub</a></li></ul><ul><li><a href="https://modao.cc/" target="_blank" rel="noopener">墨刀</a></li></ul><h2 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h2><ul><li><p><a href="https://gitee.com/zhoujingjie/apiManager" target="_blank" rel="noopener">小幺鸡</a></p><p>java编写，开源，对于编写java的人而言，便于维护和继续扩展</p></li><li><p><a href="https://github.com/YMFE/yapi" target="_blank" rel="noopener">yapi</a></p><p>nodejs 编写，页面比小幺鸡美观舒服。做文档是不错</p></li><li><p>swagger</p><p>java的文档标准，在go上也支持，可以在代码里面直接通过文档的方式生成。</p></li></ul><h2 id="公司文档整理"><a href="#公司文档整理" class="headerlink" title="公司文档整理"></a>公司文档整理</h2><ul><li><p>gitbook :</p><p>代码规范制定，可以生成epub等电子书，功能比较强大。<br>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install npm</span><br><span class="line">npm install gitbook-cli -g</span><br></pre></td></tr></table></figure></li></ul><p>  常用的命令：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">服务启动：gitbook serve</span><br><span class="line">编译 : gitbook build</span><br></pre></td></tr></table></figure></p><p>  参考的地址 ：<a href="https://gitee.com/kernsjava/code_rule.git" target="_blank" rel="noopener">https://gitee.com/kernsjava/code_rule.git</a></p><ul><li>docsify ：</li></ul><p>如果嫌弃gitbook build 太慢，没有那么多需要转换的功能，可以用这个。</p><h2 id="代码管理和自动发布"><a href="#代码管理和自动发布" class="headerlink" title="代码管理和自动发布"></a>代码管理和自动发布</h2><p>可以使用 gitlab和jenkins的组合,也可以使用gogs和drone组合,gitea也是一种代码管理工具,个人是比较推荐 gogs和drone的方式,简单轻便,但公司内部蛮多用的是jenkins<br><a href="https://www.warmjoke.com/2020/12/23/drone%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/" target="_blank" rel="noopener">https://www.warmjoke.com/2020/12/23/drone%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;办公聊天工具&quot;&gt;&lt;a href=&quot;#办公聊天工具&quot; class=&quot;headerlink&quot; title=&quot;办公聊天工具&quot;&gt;&lt;/a&gt;办公聊天工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;slack &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集成了很多的开发工具，你可以想安装插件一样在里面添加一
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>centos firewall管理</title>
    <link href="http://yoursite.com/2020/11/06/centos-firewalld/"/>
    <id>http://yoursite.com/2020/11/06/centos-firewalld/</id>
    <published>2020-11-06T02:35:00.000Z</published>
    <updated>2021-08-23T08:29:40.704Z</updated>
    
    <content type="html"><![CDATA[<p>查看所有打开的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><p>永久添加端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><p>更新防火墙规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>删除端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone= public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查看所有打开的端口&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;cod
      
    
    </summary>
    
      <category term="运维" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="linux" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql 问题定位</title>
    <link href="http://yoursite.com/2020/10/23/mysql%E8%BF%9E%E6%8E%A5%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/10/23/mysql连接数问题/</id>
    <published>2020-10-23T00:56:00.000Z</published>
    <updated>2021-08-23T08:29:40.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看连接数问题"><a href="#查看连接数问题" class="headerlink" title="查看连接数问题"></a>查看连接数问题</h2><h3 id="查看执行中的进程"><a href="#查看执行中的进程" class="headerlink" title="查看执行中的进程"></a>查看执行中的进程</h3><p>SHOW FULL PROCESSLIST;<br>show processlist;</p><h3 id="查看最大连接数"><a href="#查看最大连接数" class="headerlink" title="查看最大连接数"></a>查看最大连接数</h3><p>show variables like ‘%max_connections%’;</p><h3 id="8-0-中设置最大连接数"><a href="#8-0-中设置最大连接数" class="headerlink" title="8.0 中设置最大连接数"></a>8.0 中设置最大连接数</h3><p>set persist max_connections=200;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查看连接数问题&quot;&gt;&lt;a href=&quot;#查看连接数问题&quot; class=&quot;headerlink&quot; title=&quot;查看连接数问题&quot;&gt;&lt;/a&gt;查看连接数问题&lt;/h2&gt;&lt;h3 id=&quot;查看执行中的进程&quot;&gt;&lt;a href=&quot;#查看执行中的进程&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="运维" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>selenium 爬虫</title>
    <link href="http://yoursite.com/2020/09/14/selenium-%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2020/09/14/selenium-爬虫/</id>
    <published>2020-09-14T13:13:00.000Z</published>
    <updated>2021-09-06T07:30:04.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-selenium"><a href="#安装-selenium" class="headerlink" title="安装 selenium"></a>安装 selenium</h2><p>pip install -U selenium</p><p>ps: 在安装的过程中如果遇到被墙的问题的，很容易 timeout</p><p>在mac 环境下需要修改下载源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir .pip</span><br><span class="line">cd .pip</span><br><span class="line">vim pip.conf</span><br></pre></td></tr></table></figure><p>接着进入vim编辑，写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url=http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h3 id="内核安装"><a href="#内核安装" class="headerlink" title="内核安装"></a>内核安装</h3><p><a href="https://chromedriver.chromium.org/" target="_blank" rel="noopener">crome</a></p><h3 id="selenium-等待页面加载完成。"><a href="#selenium-等待页面加载完成。" class="headerlink" title="selenium 等待页面加载完成。"></a>selenium 等待页面加载完成。</h3><p>强制等待,目前用着是最好用的一个操作，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.sleep</span><br></pre></td></tr></table></figure><p>隐式等待</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.implicitly_wait(10)</span><br></pre></td></tr></table></figure><p>显示等待，有些时候执行不成功，具体原因还得定位，在python里面不好用，在java里面挺好用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element = WebDriverWait(driver, 10).until(</span><br><span class="line">        EC.presence_of_element_located((By.XPATH, &apos;//*[@id=&quot;su&quot;]&apos;))</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="后台执行"><a href="#后台执行" class="headerlink" title="后台执行"></a>后台执行</h3><p>当需要在服务端运行的时候，这个非常有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(&apos;--headless&apos;) chrome_options.add_argument(&apos;--no-sandbox&apos;)</span><br><span class="line">chrome_options.add_argument(&apos;--disable-dev-shm-usage&apos;)</span><br><span class="line">chrome_options.add_argument(&apos;--disable-gpu&apos;)</span><br><span class="line">dr = webdriver.Chrome(chrome_options=chrome_options)</span><br></pre></td></tr></table></figure><h3 id="form-表单模拟登陆"><a href="#form-表单模拟登陆" class="headerlink" title="form 表单模拟登陆"></a>form 表单模拟登陆</h3><p>如下，非常简单的操作，通过send_keys 就可以给表单对象设置value</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uInput = dr.find_element_by_id(&quot;username&quot;)</span><br><span class="line">uInput.send_keys(&quot;name&quot;)</span><br><span class="line">passInput = dr.find_element_by_id(&quot;password&quot;)</span><br><span class="line">passInput.send_keys(&quot;pasword&quot;)</span><br><span class="line">dr.find_element_by_class_name(&quot;btn-login&quot;).click()</span><br></pre></td></tr></table></figure><h3 id="调用对应的事件"><a href="#调用对应的事件" class="headerlink" title="调用对应的事件"></a>调用对应的事件</h3><p>java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Actions action = new Actions(driver);</span><br><span class="line">action.doubleClick(tds.get(2)).perform();</span><br></pre></td></tr></table></figure><h3 id="回退和前进"><a href="#回退和前进" class="headerlink" title="回退和前进"></a>回退和前进</h3><p>java 回退</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.navigate().back();</span><br></pre></td></tr></table></figure><p>java 前进</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.navigate().forward();</span><br></pre></td></tr></table></figure><h3 id="多页面，切换页面"><a href="#多页面，切换页面" class="headerlink" title="多页面，切换页面"></a>多页面，切换页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set = driver.getWindowHandles();</span><br><span class="line">for (String handle : set) &#123;</span><br><span class="line">    driver.switchTo().window(handle);</span><br><span class="line">    //获取满足条件的 页面</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="selenium-反爬机制"><a href="#selenium-反爬机制" class="headerlink" title="selenium 反爬机制"></a>selenium 反爬机制</h2><p>目前在爬取 问财 网站的时候遇到了 反爬的机制，反爬机制的原因是因为selenium的一个特征机制被识别，导致爬虫失效。<br>可以添加 如果配置项消除 selenium 特征。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chrome_options.add_argument(&quot;--disable-blink-features&quot;)</span><br><span class="line">chrome_options.add_argument(&quot;--disable-blink-features=AutomationControlled&quot;)</span><br></pre></td></tr></table></figure><h2 id="selenium方式的优劣"><a href="#selenium方式的优劣" class="headerlink" title="selenium方式的优劣"></a>selenium方式的优劣</h2><ul><li><p>优势：虽然通过浏览器内核，是简单的通过http模拟是媲美不了的，如果ajax很多，而且有很多拼接操作的页面，通过http请求，分析各个接口的含义需要花很多的时间，这个时候通过selenium通过浏览器内核直接抓取页面元素会方便很多。</p></li><li><p>劣势：比如模拟表单提交，如果ajax请求很少，或者没有，只有一次请求，但是又有很多动态的元素生成，这种情况下直接分析请求报文是更简单的操作。</p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.python66.com/seleniumjiaocheng/182.html" target="_blank" rel="noopener">http://www.python66.com/seleniumjiaocheng/182.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-selenium&quot;&gt;&lt;a href=&quot;#安装-selenium&quot; class=&quot;headerlink&quot; title=&quot;安装 selenium&quot;&gt;&lt;/a&gt;安装 selenium&lt;/h2&gt;&lt;p&gt;pip install -U selenium&lt;/p&gt;
&lt;p&gt;ps:
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>fabric 链包开发和部署</title>
    <link href="http://yoursite.com/2020/09/02/fabric%E9%93%BE%E5%8C%85%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2020/09/02/fabric链包部署/</id>
    <published>2020-09-01T16:00:00.000Z</published>
    <updated>2021-08-23T08:29:40.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载-fabric-sample-工程"><a href="#下载-fabric-sample-工程" class="headerlink" title="下载 fabric-sample 工程"></a>下载 <a href="git@github.com:hyperledger/fabric-samples.git">fabric-sample</a> 工程</h2><p>master不稳定，可能部署不成功，切换到release-1.4</p><h1 id="测试链码"><a href="#测试链码" class="headerlink" title="测试链码"></a>测试链码</h1><h2 id="1进入目录-chaincode-docker-devmode"><a href="#1进入目录-chaincode-docker-devmode" class="headerlink" title="1进入目录 chaincode-docker-devmode"></a>1进入目录 chaincode-docker-devmode</h2><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f docker-compose-simple.yaml up</span><br></pre></td></tr></table></figure><p>如果执行不成功，建议指定docker 版本号，目前我跑的是1.4.8</p><p>如果没有错误的话，我们的开发环境已经准备好了，接下来是对链码进行测试的步骤：</p><p>将编写的链码放到fabric-sample/chaincode/文件夹下</p><h2 id="2打开第二个终端执行："><a href="#2打开第二个终端执行：" class="headerlink" title="2打开第二个终端执行："></a>2打开第二个终端执行：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it chaincode sh</span><br></pre></td></tr></table></figure><p>编译链码,以官方的例子为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd chaincode_example02/go</span><br><span class="line">go build -o chaincode_example02</span><br><span class="line">CORE_PEER_ADDRESS=peer:7052 CORE_CHAINCODE_ID_NAME=mycc:0 ./chaincode_example02</span><br></pre></td></tr></table></figure><h2 id="3-安装与实例化和测试："><a href="#3-安装与实例化和测试：" class="headerlink" title="3.安装与实例化和测试："></a>3.安装与实例化和测试：</h2><p>打开第三个终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it cli bash</span><br></pre></td></tr></table></figure><h3 id="以下命令按照自己的链码内容自行修改"><a href="#以下命令按照自己的链码内容自行修改" class="headerlink" title="以下命令按照自己的链码内容自行修改"></a>以下命令按照自己的链码内容自行修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode install -p chaincodedev/chaincode/chaincode_example02/go -n mycc -v 0</span><br><span class="line">peer chaincode instantiate -n mycc -v 0 -c &apos;&#123;&quot;Args&quot;:[&quot;init&quot;,&quot;a&quot;,&quot;100&quot;,&quot;b&quot;,&quot;200&quot;]&#125;&apos; -C myc</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="调用-set-接口将-a-的值设置为20"><a href="#调用-set-接口将-a-的值设置为20" class="headerlink" title="调用 set() 接口将 a 的值设置为20:"></a>调用 set() 接口将 a 的值设置为20:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -n mycc -c &apos;&#123;&quot;Args&quot;:[&quot;set&quot;, &quot;a&quot;, &quot;20&quot;]&#125;&apos; -C myc</span><br></pre></td></tr></table></figure><h4 id="调用-get-接口查询-a-的值，发现a的值已经更新为20，测试完毕。"><a href="#调用-get-接口查询-a-的值，发现a的值已经更新为20，测试完毕。" class="headerlink" title="调用 get() 接口查询 a 的值，发现a的值已经更新为20，测试完毕。"></a>调用 get() 接口查询 a 的值，发现a的值已经更新为20，测试完毕。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -n mycc -c &apos;&#123;&quot;Args&quot;:[&quot;get&quot;,&quot;a&quot;]&#125;&apos; -C myc</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载-fabric-sample-工程&quot;&gt;&lt;a href=&quot;#下载-fabric-sample-工程&quot; class=&quot;headerlink&quot; title=&quot;下载 fabric-sample 工程&quot;&gt;&lt;/a&gt;下载 &lt;a href=&quot;git@github.com:hy
      
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="区块链" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>限流问题</title>
    <link href="http://yoursite.com/2020/08/26/%E9%99%90%E6%B5%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/08/26/限流问题/</id>
    <published>2020-08-26T12:24:00.000Z</published>
    <updated>2021-08-23T08:29:40.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本的概念："><a href="#基本的概念：" class="headerlink" title="基本的概念："></a>基本的概念：</h2><pre><code>限流是为了解决流量超出服务器的承载量，为了保证服务器的稳定性而做的折中方案。</code></pre><h2 id="通用的实现方式"><a href="#通用的实现方式" class="headerlink" title="通用的实现方式"></a>通用的实现方式</h2><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p><a href="https://github.com/kerns-huang/java-test/blob/master/src/main/java/ratelimit/CounterLimiter.java" target="_blank" rel="noopener">具体实现</a></p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>临界问题，11:59:59 秒100个请求，12:00:01秒 又100个请求，导致请求超出服务器的承载能力。</p><h3 id="滑动窗口限流"><a href="#滑动窗口限流" class="headerlink" title="滑动窗口限流"></a>滑动窗口限流</h3><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>比如限流是按照1分钟100次，我细分为60个时间间隔，第一秒消耗了多少个，我新增一秒</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p><a href>具体实现</a></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>避免了固定窗口的突发请求</p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>设置精度越高，算法消耗的空间越大精度低和固定窗口效果类似。</p><h3 id="漏斗算法"><a href="#漏斗算法" class="headerlink" title="漏斗算法"></a>漏斗算法</h3><h3 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h3><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="常用的资源隔离"><a href="#常用的资源隔离" class="headerlink" title="常用的资源隔离"></a>常用的资源隔离</h2><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本的概念：&quot;&gt;&lt;a href=&quot;#基本的概念：&quot; class=&quot;headerlink&quot; title=&quot;基本的概念：&quot;&gt;&lt;/a&gt;基本的概念：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;限流是为了解决流量超出服务器的承载量，为了保证服务器的稳定性而做的折中方案。&lt;/code&gt;&lt;
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="高并发" scheme="http://yoursite.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
</feed>
